#version 450
#define VULKAN 100
#define EPSILON 0.0000001f
#define PI      3.1415926f

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

struct BoundaryParticle{
    vec2 position;
    vec2 normal;
    vec2 velocity;
    vec2 predVelocity;
    vec2 pressureAcceleration;
    float rho;
    float p;
    float V;
    float psi_rho0; 
    float pad0, pad1;
    mat2 stress;
};

layout(set = 0, binding = 0) buffer StorageInput{
    BoundaryParticle particles[];
} inStorage;

layout(set = 0, binding = 1) buffer StorageOutput{
    BoundaryParticle particles[];
} outStorage;

layout(set = 0, binding = 3) buffer BoundaryStorage{
    BoundaryParticle particles[];
} boundary;

layout(set = 0, binding = 2) uniform Settings{
  vec2 G;       
  float rho0;
  float kernelRadius;		   

  float mass;		 
  float stiffness;
  float dt;	  
  float DOMAIN_WIDTH;

  float DOMAIN_HEIGHT;
  float theta;
  float sigma;
  float beta;

  float C;
  float pad0;
  float pad1;
  float pad2;
} settings;

BoundaryParticle readCurrentParticle(){
    uint particleID = gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * gl_NumWorkGroups.x;
    return boundary.particles[particleID];
}
void writeCurrentParticle(in BoundaryParticle p){
    uint particleID = gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * gl_NumWorkGroups.x;
    boundary.particles[particleID] = p;
}

float W(float r, float h){
    // float volume = PI * pow(h, 4.f) / 6.f;
    // return (h - rij) * (h - rij) / volume;
    float alpha = 1.5 / (PI * h * h);
    float beta = 2.0 / 3.0;
    float q = r / h;
    if(r < EPSILON){
        return 0;
    }
    if (q >= 0.0 && q < 1.0) {
        return alpha * (1.0 - 1.5 * q * q + 0.75 * q * q * q);
    } else if (q >= 1.0 && q < 2.0) {
        return alpha * 0.25 * (2.0 - q) * (2.0 - q) * (2.0 - q);
    } else {
        return 0.0;
    }
}



vec2 gradW(vec2 rij, float h){
    // float r = length(rij);
    // vec2 dir = r <= EPSILON ? vec2(rand(), rand()) : normalize(rij); 
    // float scale = -12.f / (PI * pow(h, 4.f));
    // float slope = scale * (r - h);
    // return dir * slope;
    float alpha = 1.5 / (PI * h * h);
    float beta = 2.0 / 3.0;
    float r = length(rij);
    float q = r / h;
    if(r < EPSILON){
        return vec2(0.0);
    }
    if (q >= 0.0 && q < 1.0) {
        float coeff = alpha * (-3.0 * q + 2.25 * q * q);
        return coeff * normalize(rij);
    } else if (q >= 1.0 && q < 2.0) {
        float coeff = -0.75 * alpha * (2.0 - q) * (2.0 - q);
        return coeff * normalize(rij);
    } else {
        return vec2(0.0);
    }
}

vec2 gradW(float r, vec2 rij, float h){
    // vec2 dir = r <= EPSILON ? vec2(rand(), rand()) : normalize(rij); 
    // float scale = -12.f / (PI * pow(h, 4.f));
    // float slope = scale * (r - h);
    // return dir * slope;
    float alpha = 1.5 / (PI * h * h);
    float beta = 2.0 / 3.0;
    float q = r / h;
    if(r < EPSILON){
        return vec2(0.0);
    }
    if (q >= 0.0 && q < 1.0) {
        float coeff = alpha * (-3.0 * q + 2.25 * q * q);
        return coeff * normalize(rij);
    } else if (q >= 1.0 && q < 2.0) {
        float coeff = -0.75 * alpha * (2.0 - q) * (2.0 - q);
        return coeff * normalize(rij);
    } else {
        return vec2(0.0);
    }
}
void main(){
    BoundaryParticle p_b = readCurrentParticle();
    float delta_b = 0.f;
    for (int i = 0; i< boundary.particles.length();i++)
    {
        BoundaryParticle pi = boundary.particles[i];
        vec2 p_pi = p_b.position - pi.position;
        float r = length(p_pi);

        if (r < settings.kernelRadius)
        {
            delta_b += W(r, settings.kernelRadius);
        }
    }

    p_b.V = 1.f / delta_b;
    p_b.psi_rho0 = settings.rho0 / p_b.V;
    p_b.rho = settings.rho0;
    
    writeCurrentParticle(p_b);
}
