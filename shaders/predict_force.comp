#version 460
#define VULKAN 100
#define EPSILON 0.0000001f
#define PI      3.1415926f
#define BUFFER_A 0
#define BUFFER_B 1

layout (local_size_x_id = 1, local_size_y = 1, local_size_z = 1) in;

struct LRParticle{
    vec2 position;
    vec2 predPosition;
    vec2 velocity;
    vec2 predVelocity;
    vec2 internalForce;
    float rho;
    float p;
    float V;
    float boundaryVolume;
    vec2 boundaryNormal;
    mat2 stress;
    uint fluidNeighbors[31];
    uint fluidNeighborCount;
};


layout(set = 0, binding = BUFFER_B) buffer StorageInput{
    LRParticle particles[];
} inStorage;

layout(set = 0, binding = BUFFER_A) buffer StorageOutput{
    LRParticle particles[];
} outStorage;

layout(set = 0, binding = 3) buffer BoundaryStorage{
    LRParticle particles[];
} boundary;

layout( push_constant ) uniform Settings{
    vec2 g; 
    float particleRadius;                 
    float kernelRadius; 

    float rho0; 
    float mass;
    float stiffness;	  
    float dt;	 

    float DOMAIN_WIDTH; 
    float DOMAIN_HEIGHT;  
    float sleepingSpeed;
    float pad2;

    float theta;       
    float sigma;                           
    float alpha;                             
    float beta;                              
    
    float C;                                
    float dragCoefficient;                
    float rhoAir;                             
    float pad3;
} settings;

struct ParticleGridEntry{
    uint particleIndex;
    uint cellKey;
};

layout(set = 1, binding = 0) buffer GridLookUpStorage{
    ParticleGridEntry entries[];
} gridLookup;

layout(set = 1, binding = 2) buffer StartringIndicesStorage{
    uint startingIndices[];
};

uint calculateCellKey(uvec2 cell){
    return (cell.x * 3079 + cell.y * 1543) % gridLookup.entries.length();
}

float rand(){
    return fract(sin(dot(vec2(settings.dt * 25165843.f, settings.dt * 786433), vec2(12.9898, 78.233))) * 43758.5453);
}

float W(float r, float h){
    float volume = PI * pow(h, 4.f) / 6.f;
    return (h - r) * (h - r) / volume;
}
vec2 gradW(vec2 rij, float h){
    float r = length(rij);
    vec2 dir = r <= EPSILON ? vec2(rand(), rand()) : normalize(rij); 
    float scale = -12.f / (PI * pow(h, 4.f));
    float slope = scale * (r - h);
    return -dir * slope;
}

vec2 gradW(float r, vec2 rij, float h){
    vec2 dir = r <= EPSILON ? vec2(rand(), rand()) : normalize(rij); 
    float scale = -12.f / (PI * pow(h, 4.f));
    float slope = scale * (r - h);
    return -dir * slope;  
}

void main(){
    uint particleID = gl_GlobalInvocationID.x;;
    LRParticle p = inStorage.particles[particleID];
    //* Init pressure internalForce
    vec2 internalForce = vec2(0.f);
    vec2 frictionalForce = vec2(0.f);

    vec2 relativeVelocity = vec2(0) - p.velocity;
    float occluded = 0.866; //* 30Â° cone
    // Todo: calculate this globally for adative timestepping
    // float c = sqrt(2.f * length(settings.g) * settings.DOMAIN_HEIGHT); //* maximum velocity
    

    float pRhoSq = p.rho * p.rho;
    float eps = 0.01f;

    // For all previously stored fluid neighbors
    for(uint i = 0; i < p.fluidNeighborCount; i++)
    {
        uint particleIndex = p.fluidNeighbors[i];
        LRParticle pi = inStorage.particles[particleIndex];
    
        vec2 p_pi = p.predPosition - pi.predPosition;
        float r = length(p_pi);
    
        if (r < settings.kernelRadius)
        {
            //* Pressure calculation
            float piRhoSq = pi.rho * pi.rho;
            vec2 gradient = gradW(p_pi, settings.kernelRadius);
            internalForce += settings.mass * ((p.p / pRhoSq) + (pi.p / piRhoSq)) * gradient;

            vec2 F_f = settings.mass * ((p.stress / pRhoSq) + (pi.stress / piRhoSq)) * gradient;

            // float v = (2.f * settings.alpha * settings.kernelRadius * c) / (p.rho + pi.rho); //* viscousity constant
            // float pi = -v * (min(dot((p.velocity - pi.velocity), p_pi), 0.f) / ((r * r) + (eps * settings.kernelRadius * settings.kernelRadius)));
            // vec2 F_v = settings.mass * pi * gradient;

            frictionalForce += F_f;

            occluded = max(occluded, dot(normalize(relativeVelocity), normalize(p_pi)));
        }
    }

    //* For each implicit boundary
    {
        vec2 gradient = gradW(p.boundaryNormal, settings.kernelRadius);
        internalForce += p.boundaryVolume * settings.rho0 * (p.p / pRhoSq) * gradient; 
        
        vec2 F_f = p.boundaryVolume * settings.rho0 * (p.stress / pRhoSq) * gradient;
        // float v = (settings.sigma * settings.kernelRadius * c) / (2.f * p.rho); //* viscousity constant 
        // float pi = -v * (min(dot((p.velocity - pb.velocity), p_pb), 0.f) / ((r * r) + (eps * settings.kernelRadius * settings.kernelRadius)));
        // vec2 F_v = pb.psi_rho0 * pi * gradient; 

        frictionalForce += F_f;
    }

    frictionalForce *= -settings.mass;
    internalForce *= -settings.mass;

    //? https://cg.informatik.uni-freiburg.de/publications/2017_CAG_generalizedDragForce_v2.pdf
    float dragWeight = max(0, min(1, 1 - occluded)); 
    float crossSectionalArea = dragWeight * sqrt((settings.mass / p.rho) / PI) * 2.f; 
    vec2 dragForce  = (1.f/2.f * settings.rhoAir * (length(relativeVelocity) * relativeVelocity) * settings.dragCoefficient * crossSectionalArea);
    

    p.internalForce = internalForce + dragForce + frictionalForce;

    outStorage.particles[particleID] = p;
}

//! tensile instability