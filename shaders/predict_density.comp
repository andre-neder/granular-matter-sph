#version 450
#define VULKAN 100
#define EPSILON 0.0000001f
#define PI      3.1415926f
#define BUFFER_A 0
#define BUFFER_B 1

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

struct Particle{
    vec2 position;
    vec2 predPosition;
    vec2 velocity;
    vec2 predVelocity;
    vec2 pressureAcceleration;
    float rho;
    float p;
    float V;
    float psi_rho0; 
    float pad0, pad1;
    mat2 stress;
};

struct BoundaryParticle{
    vec2 position;
    vec2 normal;
    vec2 velocity;
    vec2 predVelocity;
    vec2 pressureAcceleration;
    float rho;
    float p;
    float V;
    float psi_rho0; 
    float pad0, pad1;
    mat2 stress;
};

layout(set = 0, binding = BUFFER_B) buffer StorageInput{
    Particle particles[];
} inStorage;

layout(set = 0, binding = BUFFER_A) buffer StorageOutput{
    Particle particles[];
} outStorage;

layout(set = 0, binding = 3) buffer BoundaryStorage{
    BoundaryParticle particles[];
} boundary;

layout(set = 0, binding = 2) uniform Settings{
  vec2 G;       
  float rho0;
  float kernelRadius;		   

  float mass;		 
  float stiffness;
  float dt;	  
  float DOMAIN_WIDTH;

  float DOMAIN_HEIGHT;
  float theta;
  float sigma;
  float beta;

  float C;
  float alpha;
  float pad1;
  float pad2;
} settings;

uint particleID = gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * gl_NumWorkGroups.x;

Particle readCurrentParticle(){
    return inStorage.particles[particleID];
}
void writeCurrentParticle(in Particle p){
    outStorage.particles[particleID] = p;
}

//* https://github.com/glslify/glsl-frobenius/blob/master/index.glsl
float frobenius(mat2 m) {
  return sqrt(dot(m[0],m[0]) + dot(m[1],m[1]));
}

float frobenius(mat3 m) {
  return sqrt(dot(m[0],m[0]) + dot(m[1],m[1]) + dot(m[2],m[2]));
}

float rand(){
    return fract(sin(dot(vec2(settings.dt * 25165843.f, settings.dt * 786433), vec2(12.9898, 78.233))) * 43758.5453);
}


float W(float r, float h){
    float volume = PI * pow(h, 4.f) / 6.f;
    return (h - r) * (h - r) / volume;
    // float alpha = 15.f / (14.f * PI * h * h);
    // float q = r / h;
    // if(r < EPSILON){
    //     return 0;
    // }
    // if (q >= 0.0 && q < 1.0) {
    //     return alpha * (1.f - 1.5f * q * q + 0.75f * q * q * q);
    // } else if (q >= 1.f && q < 2.f) {
    //     float beta = (2.f - q);
    //     return alpha * 0.25f * beta * beta * beta;
    // } else {
    //     return 0.f;
    // }
}
vec2 gradW(vec2 rij, float h){
    float r = length(rij);
    vec2 dir = r <= EPSILON ? vec2(rand(), rand()) : normalize(rij); 
    float scale = -12.f / (PI * pow(h, 4.f));
    float slope = scale * (r - h);
    return -dir * slope;
    // float alpha = 15.f / (14.f * PI * h * h);
    // float r = length(rij);
    // float q = r / h;
    // if(r < EPSILON){
    //     return vec2(0.0);
    // }
    // if (q >= 0.0 && q < 1.0) {
    //     float coeff = alpha * (-3.0 * q + 2.25 * q * q);
    //     return coeff * normalize(rij);
    // } else if (q >= 1.0 && q < 2.0) {
    //     float beta = (2.f - q);
    //     float coeff = -0.75 * alpha * beta * beta;
    //     return coeff * normalize(rij);
    // } else {
    //     return vec2(0.0);
    // }
}

vec2 gradW(float r, vec2 rij, float h){
    vec2 dir = r <= EPSILON ? vec2(rand(), rand()) : normalize(rij); 
    float scale = -12.f / (PI * pow(h, 4.f));
    float slope = scale * (r - h);
    return -dir * slope;
    // float alpha = 15.f / (14.f * PI * h * h);
    // float q = r / h;
    // if(r < EPSILON){
    //     return vec2(0.0);
    // }
    // if (q >= 0.0 && q < 1.0) {
    //     float coeff = alpha * (-3.0 * q + 2.25 * q * q);
    //     return coeff * normalize(rij);
    // } else if (q >= 1.0 && q < 2.0) {
    //     float beta = (2.f - q);
    //     float coeff = -0.75 * alpha * beta * beta;
    //     return coeff * normalize(rij);
    // } else {
    //     return vec2(0.0);
    // }
}

void main(){
    Particle p = readCurrentParticle();
    //* Density
    p.rho = 0.f;

    //* For all fluid particles
    for (int i = 0; i< inStorage.particles.length();i++)
    {
        Particle pi = inStorage.particles[i];
        vec2 p_pi = p.predPosition - pi.predPosition;
        float r = length(p_pi);
       
        if (r < settings.kernelRadius)
        {
            //* Density
            p.rho += W(r, settings.kernelRadius);
        }
    }
    p.rho *= settings.mass;
  
    //* For all boundary particles
    for (int i = 0; i < boundary.particles.length();i++)
    {
        BoundaryParticle pb = boundary.particles[i];
        vec2 p_pb = p.predPosition - pb.position;
        float r = length(p_pb);
       
        if (r < settings.kernelRadius)
        {
            //* Density
            p.rho += p.psi_rho0 * W(r, settings.kernelRadius);
        }
    }
    
    //* tait's equation
    p.rho = max(p.rho, settings.rho0); 
    // float exponent = 7.f;
    // float B = settings.stiffness;// (settings.rho0 * c * c) / exponent;
    // p.p = B * (pow(max(p.rho, settings.rho0) / settings.rho0, exponent) - 1.f); 

    //* Ideal gas equation
    p.p = settings.stiffness * (p.rho - settings.rho0); 
    
    p.p = max(p.p, 0.f);     //? required?
    p.V = settings.mass / p.rho;

    writeCurrentParticle(p);
}

// volume = mass / density