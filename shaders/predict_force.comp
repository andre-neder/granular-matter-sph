#version 460
#define VULKAN 100
#define EPSILON 0.0000001f
#define PI      3.1415926f
#define BUFFER_A 0
#define BUFFER_B 1

layout (local_size_x_id = 1, local_size_y = 1, local_size_z = 1) in;

struct Particle{
    vec2 position;
    vec2 predPosition;
    vec2 velocity;
    vec2 predVelocity;
    vec2 pressureAcceleration;
    float rho;
    float p;
    float V;
    float psi_rho0; 
    float pad0, pad1;
    mat2 stress;
};

struct BoundaryParticle{
    vec2 position;
    vec2 normal;
    vec2 velocity;
    vec2 predVelocity;
    vec2 pressureAcceleration;
    float rho;
    float p;
    float V;
    float psi_rho0; 
    float pad0, pad1;
    mat2 stress;
};

layout(set = 0, binding = BUFFER_B) buffer StorageInput{
    Particle particles[];
} inStorage;

layout(set = 0, binding = BUFFER_A) buffer StorageOutput{
    Particle particles[];
} outStorage;

layout(set = 0, binding = 3) buffer BoundaryStorage{
    BoundaryParticle particles[];
} boundary;

layout(set = 0, binding = 2) uniform Settings{
  vec2 G;       
  float rho0;
  float kernelRadius;		   

  float mass;		 
  float stiffness;
  float dt;	  
  float DOMAIN_WIDTH;

  float DOMAIN_HEIGHT;
  float theta;
  float sigma;
  float beta;

  float C;
  float alpha;
  float pad1;
  float pad2;
} settings;

struct ParticleGridEntry{
    uint particleIndex;
    uint cellKey;
};

layout(set = 1, binding = 0) buffer GridLookUpStorage{
    ParticleGridEntry entries[];
} gridLookup;

layout(set = 1, binding = 2) buffer StartringIndicesStorage{
    uint startingIndices[];
};

uint calculateCellKey(uvec2 cell){
    return (cell.x + cell.y * cell.x);
}

float rand(){
    return fract(sin(dot(vec2(settings.dt * 25165843.f, settings.dt * 786433), vec2(12.9898, 78.233))) * 43758.5453);
}

float W(float r, float h){
    float volume = PI * pow(h, 4.f) / 6.f;
    return (h - r) * (h - r) / volume;
}
vec2 gradW(vec2 rij, float h){
    float r = length(rij);
    vec2 dir = r <= EPSILON ? vec2(rand(), rand()) : normalize(rij); 
    float scale = -12.f / (PI * pow(h, 4.f));
    float slope = scale * (r - h);
    return -dir * slope;
}

vec2 gradW(float r, vec2 rij, float h){
    vec2 dir = r <= EPSILON ? vec2(rand(), rand()) : normalize(rij); 
    float scale = -12.f / (PI * pow(h, 4.f));
    float slope = scale * (r - h);
    return -dir * slope;
}

void main(){
    uint particleID = gl_GlobalInvocationID.x;;
    Particle p_in = inStorage.particles[particleID];
    Particle p_out = p_in;
    //* Init pressure pressureAcceleration
    vec2 pressureAcceleration = vec2(0.f);
    vec2 frictionalAcceleration = vec2(0.f);

    float c = sqrt(2.f * length(settings.G) * settings.DOMAIN_HEIGHT); //* maximum velocity

    float pRhoSq = p_in.rho * p_in.rho;
    float eps = 0.01f;

    // * Sum up pressure forces and strain
    // for (int i = 0; i < inStorage.particles.length();i++)
    // {
    //     Particle pi = inStorage.particles[i];
        
    //     if (i == particleID){
    //         continue;
    //     }

    //     vec2 p_pi = p_in.predPosition - pi.predPosition;
    //     float r = length(p_pi);
        
    //     if (r < settings.kernelRadius)
    //     {
    //         //* Pressure calculation
    //         float piRhoSq = pi.rho * pi.rho;
    //         vec2 gradient = gradW(p_pi, settings.kernelRadius);
    //         pressureAcceleration -= settings.mass * ((p_in.p / pRhoSq) + (pi.p / piRhoSq)) * gradient;
    //         vec2 a_f = -settings.mass * ((p_in.stress / pRhoSq) + (pi.stress / piRhoSq)) * gradient;

    //         // float v = (2.f * settings.alpha * settings.kernelRadius * c) / (p.rho + pi.rho); //* viscousity constant
    //         // float omicron = -v * (min(dot((p.velocity - pi.velocity), p_pi), 0.f) / ((r * r) + (eps * settings.kernelRadius * settings.kernelRadius)));
    //         // vec2 a_v = settings.mass * omicron * gradient;
    //         frictionalAcceleration += a_f;// + a_v;//a_v +
    //     }
    // }

    ivec2 particleCell = ivec2(floor(vec2(p_in.predPosition / settings.kernelRadius)));

    for (int k = -1; k <= 1; k++){
        for (int l = -1; l <= 1; l++){
            // current cell coordinate
            ivec2 cell = ivec2(particleCell.x + k, particleCell.y + l);

            // current cell key
            uint cellKey = calculateCellKey(uvec2(cell));
            
            // index of current entry for cell
            uint startIndex = startingIndices[cellKey];

            // While particle is in the same cell
            for(uint i = startIndex; i < gridLookup.entries.length(); i++)
            {
                if(gridLookup.entries[i].cellKey != cellKey){
                    break;
                }
                // index of particle of current index
                uint particleIndex = gridLookup.entries[i].particleIndex;
                Particle pi = inStorage.particles[particleIndex];
                
                if (particleIndex == particleID){
                    continue;
                }

                
                vec2 p_pi = p_in.predPosition - pi.predPosition;
                float r = length(p_pi);
            
                if (r < settings.kernelRadius)
                {
                    //* Pressure calculation
                    float piRhoSq = pi.rho * pi.rho;
                    vec2 gradient = gradW(p_pi, settings.kernelRadius);
                    pressureAcceleration -= settings.mass * ((p_in.p / pRhoSq) + (pi.p / piRhoSq)) * gradient;
                    vec2 a_f = -settings.mass * ((p_in.stress / pRhoSq) + (pi.stress / piRhoSq)) * gradient;

                    // float v = (2.f * settings.alpha * settings.kernelRadius * c) / (p.rho + pi.rho); //* viscousity constant
                    // float omicron = -v * (min(dot((p.velocity - pi.velocity), p_pi), 0.f) / ((r * r) + (eps * settings.kernelRadius * settings.kernelRadius)));
                    // vec2 a_v = settings.mass * omicron * gradient;
                    frictionalAcceleration += a_f;// + a_v;//a_v +
                }
            }
        } 
    }


    //* For all boundary particles
    for (int i = 0; i < boundary.particles.length();i++)
    {
        BoundaryParticle pb = boundary.particles[i];
       
        vec2 p_pb = p_in.predPosition - pb.position;
        float r = length(p_pb);
        
        if (r < settings.kernelRadius)
        {
            //* using normal instead of direction to boundary
            vec2 gradient = gradW(p_pb, settings.kernelRadius);
            pressureAcceleration -= pb.psi_rho0 * (p_in.p / pRhoSq) * gradient; 
            
            vec2 a_f = -settings.mass * pb.psi_rho0 * (p_in.stress / pRhoSq) * gradient; 
            //Todo: vel / predvel ???
            float v = (settings.sigma * settings.kernelRadius * c) / (2.f * p_in.rho); //* viscousity constant 
            float omicron = -v * (min(dot((p_in.velocity - pb.velocity), p_pb), 0.f) / ((r * r) + (eps * settings.kernelRadius * settings.kernelRadius)));
            vec2 a_v = pb.psi_rho0 * omicron * gradient;
            frictionalAcceleration += a_f + a_v; //max(a_f, a_v);  a_v +
        }
    }
    
    p_out.pressureAcceleration = pressureAcceleration;// + frictionalAcceleration;

    outStorage.particles[particleID] = p_out;
}
