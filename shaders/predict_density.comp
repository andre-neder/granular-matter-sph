#version 450
#define VULKAN 100
#define EPSILON 0.0000001f
#define PI      3.1415926f
#define BUFFER_A 0
#define BUFFER_B 1

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

struct Particle{
    vec2 position;
    vec2 predPosition;
    vec2 velocity;
    vec2 predVelocity;
    vec2 pressureAcceleration;
    float rho;
    float p;
    float V;
    float psi_rho0; 
    float pad0, pad1;
    mat2 stress;
};

struct BoundaryParticle{
    vec2 position;
    vec2 normal;
    vec2 velocity;
    vec2 predVelocity;
    vec2 pressureAcceleration;
    float rho;
    float p;
    float V;
    float psi_rho0; 
    float pad0, pad1;
    mat2 stress;
};

layout(set = 0, binding = BUFFER_B) buffer StorageInput{
    Particle particles[];
} inStorage;

layout(set = 0, binding = BUFFER_A) buffer StorageOutput{
    Particle particles[];
} outStorage;

layout(set = 0, binding = 3) buffer BoundaryStorage{
    BoundaryParticle particles[];
} boundary;

layout(set = 0, binding = 2) uniform Settings{
  vec2 G;       
  float rho0;
  float kernelRadius;		   

  float mass;		 
  float stiffness;
  float dt;	  
  float DOMAIN_WIDTH;

  float DOMAIN_HEIGHT;
  float theta;
  float sigma;
  float beta;

  float C;
  float alpha;
  float pad1;
  float pad2;
} settings;

uint particleID = gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * gl_NumWorkGroups.x;

Particle readCurrentParticle(){
    return inStorage.particles[particleID];
}
void writeCurrentParticle(in Particle p){
    outStorage.particles[particleID] = p;
}

//* https://github.com/glslify/glsl-frobenius/blob/master/index.glsl
float frobenius(mat2 m) {
  return sqrt(dot(m[0],m[0]) + dot(m[1],m[1]));
}

float frobenius(mat3 m) {
  return sqrt(dot(m[0],m[0]) + dot(m[1],m[1]) + dot(m[2],m[2]));
}

float rand(){
    return fract(sin(dot(vec2(settings.dt * 25165843.f, settings.dt * 786433), vec2(12.9898, 78.233))) * 43758.5453);
}


float W(float r, float h){
    float volume = PI * pow(h, 4.f) / 6.f;
    return (h - r) * (h - r) / volume;
    // float hSq = h * h;
    // float k = 40.f /(7.f * PI * hSq);
    // float l = 240.f /(7.f * PI * hSq);
    // float q = r / h;
    // float res = 0.f;
    // if(q <= 1.f){
    //     if(q <= 0.5f){
    //         float qSq = q * q;
    //         float qPow3 = qSq * q;
    //         res = k * (6.f * qPow3 - 6.f * qSq + 1.f);
    //     }
    //     else{
    //         res = k * (2.f * pow(1.f - q, 3.f));
    //     }
    // }
    // return res;
}
vec2 gradW(vec2 rij, float h){
    float r = length(rij);
    vec2 dir = r <= EPSILON ? vec2(rand(), rand()) : normalize(rij); 
    float scale = -12.f / (PI * pow(h, 4.f));
    float slope = scale * (r - h);
    return -dir * slope;
    // float hSq = h * h;
    // float k = 40.f /(7.f * PI * hSq);
    // float l = 240.f /(7.f * PI * hSq);
    // float rl = length(rij);
    // float q = rl / h;
    // vec2 res = vec2(0.f);
    // if(q <= 1.f){
    //     if(rl > EPSILON){
    //         vec2 gradQ = rij / rl / h;
    //         if(q <= 0.5f){
    //             res = l * q * (3 * q - 2.f) * gradQ;   
    //         }
    //         else{
    //             float fac = 1.f - q;
    //             res = l * (-fac * fac) * gradQ;
    //         }
    //     }
    // }
    // return res;
}

// vec2 boundaryOrigins[4] = {
//     vec2(0,0), 
//     vec2(0,0), 
//     vec2(settings.DOMAIN_WIDTH, 0), 
//     vec2(0, settings.DOMAIN_HEIGHT)
// };

// vec2 boundaryDirections[4] = {
//     vec2(1,0), 
//     vec2(0,1), 
//     vec2(0,1), 
//     vec2(1,0)
// };

// float distToBoundary(int boundaryIndex, vec2 position){
//     vec2 dir = boundaryDirections[boundaryIndex];
//     vec2 origin = boundaryOrigins[boundaryIndex];
//     vec2 perpDir = vec2(dir.y, -dir.x);
//     vec2 pos_origin = origin - position;
//     return abs(dot(normalize(perpDir), pos_origin));
// }

// float boundaryVolume(int boundaryIndex, vec2 position){
//     vec2 dir = boundaryDirections[boundaryIndex];
//     vec2 origin = boundaryOrigins[boundaryIndex];
//     float theta = 0; //radians;
//     float r = settings.kernelRadius;
//     return (theta / 360) * PI * r * r - (1/2) * r * r * sin(theta);
// }

void main(){
    Particle p = readCurrentParticle();
    //* Density
    p.rho = 0.f;
    p.pad1 = 0.f;
    //* For all fluid particles
    for (int i = 0; i< inStorage.particles.length();i++)
    {
        Particle pi = inStorage.particles[i];
        vec2 p_pi = p.predPosition - pi.predPosition;
        float r = length(p_pi);
       
        if (r < settings.kernelRadius)
        {
            //* Density
            p.rho += settings.mass * W(r, settings.kernelRadius);
            p.pad1 += 1.f;
        }
    }
    // p.rho *= settings.mass;
  
    //* For all boundary particles
    for (int i = 0; i < boundary.particles.length();i++)
    {
        BoundaryParticle pb = boundary.particles[i];
        vec2 p_pb = p.predPosition - pb.position;
        float r = length(p_pb);
       
        if (r < settings.kernelRadius)
        {
            //* Density
            p.rho += pb.psi_rho0 * W(r, settings.kernelRadius);
        }
    }
    //* For all boundaries
    // for (int i = 0; i < 4;i++)
    // {
    //    float r = distToBoundary(i, p.predPosition);
    //    if(r <= settings.kernelRadius){
    //         //* Density
    //         float V_b = 0.f;
    //         p.rho += V_b * settings.rho0 * W(r, settings.kernelRadius);
    //    }
    // }

    //* tait's equation
    // p.rho = max(p.rho, settings.rho0); 
    // float exponent = 7.f;
    // float B = 50.f;// (settings.rho0 * c * c) / exponent;
    // p.p = B * (pow(max(p.rho, settings.rho0) / settings.rho0, exponent) - 1.f); 

    //* Ideal gas equation
    p.p = settings.stiffness * (p.rho - settings.rho0); 
    
    p.p = max(p.p, 0.f);     //? required?
    p.V = settings.mass / p.rho;
    p.pad0 = p.rho / settings.rho0;

    writeCurrentParticle(p);
}

// volume = mass / density