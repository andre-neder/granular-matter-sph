#version 460
#define VULKAN 100
#define EPSILON 0.0000001f
#define PI      3.1415926f
#define BUFFER_A 0
#define BUFFER_B 1
#extension GL_EXT_nonuniform_qualifier : require
layout (local_size_x_id = 1, local_size_y = 1, local_size_z = 1) in;

struct LRParticle{
    vec2 position;
    vec2 predPosition;
    vec2 velocity;
    vec2 externalForce;
    vec2 internalForce;
    float rho;
    float p;
    float V;
    float a;
    vec2 d;
    mat2 stress;
    vec2 dijpj;
    float dpi;
    float lastP;
    float densityAdv;
    float pad0;
    float pad1;
    float pad2;
};


layout(set = 0, binding = BUFFER_B) buffer StorageInput{
    LRParticle particles[];
} inStorage;

layout(set = 0, binding = BUFFER_A) buffer StorageOutput{
    LRParticle particles[];
} outStorage;

layout( push_constant ) uniform Settings{
    vec2 g; 
    float r_LR;                 
    float h_LR; 

    float rho0; 
    float mass;
    float stiffness;	  
    float dt;	 

    float DOMAIN_WIDTH; 
    float DOMAIN_HEIGHT;  
    float sleepingSpeed;
    float h_HR;

    float theta;       
    float sigma;                           
    float alpha;                             
    uint n_HR;                              
    
    vec2 windDirection;                     
    float dragCoefficient;                
    float rhoAir;          
} settings;

struct ParticleGridEntry{
    uint particleIndex;
    uint cellKey;
};

layout(set = 1, binding = 0) buffer GridLookUpStorage{
    ParticleGridEntry entries[];
} gridLookup;

layout(set = 1, binding = 2) buffer StartringIndicesStorage{
    uint startingIndices[];
};

uint calculateCellKey(uvec2 cell){
    return (cell.x * 3079 + cell.y * 1543) % gridLookup.entries.length();
}

float rand(){
    return fract(sin(dot(vec2(settings.dt * 25165843.f, settings.dt * 786433), vec2(12.9898, 78.233))) * 43758.5453);
}

//Todo: try other gradient
float W(float r, float h){
    float volume = PI * pow(h, 4.f) / 6.f;
    return (h - r) * (h - r) / volume;
}
vec2 gradW(vec2 rij, float h){
    float r = length(rij);
    vec2 dir = r <= EPSILON ? vec2(rand(), rand()) : normalize(rij); 
    float scale = -12.f / (PI * pow(h, 4.f));
    float slope = scale * (r - h);
    return -dir * slope;
}

vec2 gradW(float r, vec2 rij, float h){
    vec2 dir = r <= EPSILON ? vec2(rand(), rand()) : normalize(rij); 
    float scale = -12.f / (PI * pow(h, 4.f));
    float slope = scale * (r - h);
    return -dir * slope;  
}


layout(set = 0, binding = 3) uniform sampler volumeMapSampler; 
layout(set = 0, binding = 4) uniform texture2D sdfTexture[]; 
vec2 adjustKernelRadiusOffset(vec2 position){
    return vec2(position.x - 2 * settings.h_LR, position.y - 2 * settings.h_LR);
}
vec2 adjustKernelRadiusScale(vec2 scale){
    return vec2(scale + 4 * settings.h_LR);
}

#define for_all_fluid_neighbors(code) { \
    ivec2 particleCell = ivec2(floor(vec2(p.predPosition / settings.h_LR))); \
    for (int k = -1; k <= 1; k++){ \
        for (int l = -1; l <= 1; l++){ \
            ivec2 cell = ivec2(particleCell.x + k, particleCell.y + l); \
            uint cellKey = calculateCellKey(uvec2(cell)); \
            uint startIndex = startingIndices[cellKey]; \
            for(uint i = startIndex; i < gridLookup.entries.length(); i++) { \
                if(gridLookup.entries[i].cellKey != cellKey){ \
                    break; \
                } \
                uint particleIndex = gridLookup.entries[i].particleIndex; \
                LRParticle pi = inStorage.particles[particleIndex]; \
                vec2 p_pi = p.predPosition - pi.predPosition;\
                float r = length(p_pi); \
                code \
            } \
        }  \
    } \
}

void main(){
    uint particleID = gl_GlobalInvocationID.x;;
    LRParticle p = inStorage.particles[particleID];
    //* Init pressure internalForce
    vec2 internalForce = vec2(0.f);
    // vec2 frictionalForce = vec2(0.f);

    // vec2 relativeVelocity = settings.windDirection - p.velocity;
    // float occluded = 0.866; //* 30Â° cone

    float densityi = p.rho / settings.rho0;
    float densityiSQ = densityi * densityi;
    float dpi = p.p / densityiSQ; // Not same as p.dpi
    // float pRhoSq = p.rho * p.rho;

    for_all_fluid_neighbors(
        if(particleIndex == particleID){
            continue;
        }
        if (r < settings.h_LR)
        {
            //* Pressure calculation
            // float piRhoSq = pi.rho * pi.rho;
            float densityj = pi.rho / settings.rho0;
            float densityjSQ = densityj * densityj;
            float dpj = pi.p / densityjSQ;
            vec2 gradient = gradW(p_pi, settings.h_LR);
            // internalForce += settings.mass * ((p.p / pRhoSq) + (pi.p / piRhoSq)) * gradient;
            internalForce += pi.V * (dpi + dpj) * gradient; // settings.rho0 / settings.rho0 * dpj
            // vec2 F_f = settings.mass * ((p.stress / pRhoSq) + (pi.stress / piRhoSq)) * gradient;

            // frictionalForce += F_f;

            // occluded = max(occluded, dot(normalize(relativeVelocity), normalize(p_pi)));
        }
    )

    //Todo: move to separat buffer
    //* For each implicit boundary
    float halfBoxSize = settings.DOMAIN_HEIGHT / 4;
    vec2 rigidBodyPositions[] = {
        vec2( 0, 0), // Bottom
        vec2( 0, 0), // Left
        vec2( settings.DOMAIN_WIDTH, 0), // Right
        // vec2( settings.DOMAIN_WIDTH / 2.0 - halfBoxSize, 0),
    };
    vec2 rigidBodyScale[] = {
        vec2(1), vec2(1), vec2(1), 
        // vec2(halfBoxSize * 2),
    };


    for (int i = 0; i < rigidBodyPositions.length(); i++){
        vec2 samplePosition = (p.predPosition - adjustKernelRadiusOffset(rigidBodyPositions[i])) / adjustKernelRadiusScale(rigidBodyScale[i]);
        vec2 p_pi = texture(sampler2D(sdfTexture[i], volumeMapSampler), samplePosition).gb;
        float r = length(p_pi);
        if(r < settings.h_LR){
            float volume = texture(sampler2D(sdfTexture[i], volumeMapSampler), samplePosition).r;
            vec2 gradient = gradW(p_pi, settings.h_LR);
            // internalForce += volume * settings.rho0 * (p.p / pRhoSq) * gradient; 
            internalForce += volume * dpi * gradient;
            // vec2 F_f = volume * settings.rho0 * (p.stress / pRhoSq) * gradient;

            // float cs = sqrt(settings.stiffness);
            // float eps = 0.01f;
            // float ny = (settings.sigma * settings.h_LR * cs) / (2.f * p.rho); //* viscousity constant 
            // float ny = (2 * settings.sigma * settings.h_LR * cs) / (settings.rho0 + p.rho); //* viscousity constant 
            // float pi = -ny * (min(dot((p.velocity - vec2(0)), p_pi), 0.f) / ((r * r) + (eps * settings.h_LR * settings.h_LR)));
            // vec2 F_v = volume * settings.rho0 * pi * gradient; 

            // frictionalForce += F_f;//max(F_v, F_f);
            // frictionalForce += F_v;
        }
    }

    // frictionalForce *= -settings.mass;
    internalForce *= -settings.mass;

    //? https://cg.informatik.uni-freiburg.de/publications/2017_CAG_generalizedDragForce_v2.pdf
    // float dragWeight = max(0, min(1, 1 - occluded)); 
    // float crossSectionalArea = dragWeight * sqrt((settings.mass / p.rho) / PI) * 2.f; 
    // vec2 dragForce  = (1.f/2.f * settings.rhoAir * (length(relativeVelocity) * relativeVelocity) * settings.dragCoefficient * crossSectionalArea);
    

    p.internalForce = internalForce; 
    // p.internalForce += frictionalForce;
    // p.externalForce += dragForce;

    outStorage.particles[particleID] = p;
}
