#version 460
#define VULKAN 100
#define EPSILON 0.0000001f
#define PI      3.1415926f
#define BUFFER_A 0
#define BUFFER_B 1
#define UINT_MAX (0xffffffff)

layout (local_size_x_id = 1, local_size_y = 1, local_size_z = 1) in;

struct Particle{
    vec2 position;
    vec2 predPosition;
    vec2 velocity;
    vec2 predVelocity;
    vec2 pressureAcceleration;
    float rho;
    float p;
    float V;
    float psi_rho0; 
    float pad0, pad1;
    mat2 stress;
    uint fluidNeighbors[16];
    uint boundaryNeighbors[14];
    uint fluidNeighborCount;
    uint boundaryNeighborCount;
};

layout(set = 0, binding = BUFFER_A) buffer StorageInput{
    Particle particles[];
} inStorage;

layout(set = 0, binding = BUFFER_B) buffer StorageOutput{
    Particle particles[];
} outStorage;

layout(set = 0, binding = 3) buffer BoundaryStorage{
    Particle particles[];
} boundary;

layout( push_constant ) uniform Settings{
    vec2 G; 
    float particleRadius;                 
    float kernelRadius; 

    float rho0; 
    float mass;
    float stiffness;	  
    float dt;	 

    float DOMAIN_WIDTH; 
    float DOMAIN_HEIGHT;  
    float pad1;
    float pad2;

    float theta;       
    float sigma;                           
    float alpha;                             
    float beta;                              
    
    float C;                                
    float dragCoefficient;                
    float rhoAir;                             
    float pad3;
} settings;




struct ParticleGridEntry{
    uint particleIndex;
    uint cellKey;
};

layout(set = 1, binding = 0) buffer GridLookUpStorage{
    ParticleGridEntry entries[];
} gridLookup;

layout(set = 1, binding = 2) buffer StartringIndicesStorage{
    uint startingIndices[];
};

uint calculateCellKey(uvec2 cell){
    return (cell.x * 3079 + cell.y * 1543) % gridLookup.entries.length();
}

void main(){
    uint particleID = gl_GlobalInvocationID.x;;
    Particle p = inStorage.particles[particleID];

    vec2 predVelocity = p.velocity + settings.G * settings.dt;
    p.predVelocity = predVelocity;
    vec2 predPosition = p.position + predVelocity * 1.f/120.f;
    p.predPosition = predPosition;

    outStorage.particles[particleID] = p;

    ivec2 gridCell = ivec2(floor(vec2(p.predPosition / settings.kernelRadius)));
    
    uint cellKey = calculateCellKey(gridCell);

    gridLookup.entries[particleID].particleIndex = particleID;
    gridLookup.entries[particleID].cellKey = cellKey;
    startingIndices[particleID] = UINT_MAX;
}
