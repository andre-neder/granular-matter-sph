#version 460

#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_shader_atomic_float : enable

#define UINT_MAX (0xffffffff)
#define FLOAT_MAX 3.402823466e+38
#define EPSILON 0.0000001f
#define PI      3.1415926f
#define PRECOMPUTE_D true

//* Types

struct LRParticle{
    vec4 position;
    vec4 velocity;
    vec4 externalForce;
    vec4 internalForce;
    vec4 d;
    vec4 dijpj;
    mat4 stress;
    mat4 deviatoricStress;

    float rho;
    float p;
    float V;
    float a;
    float dpi;
    float lastP;
    float densityAdv;
    float pad0;
    vec4 averageN;
vec4 color;
};

struct ParticleGridEntry{
    uint particleIndex;
    uint cellKey;
};

struct VolumeMapTransform{
    vec4 position;
    vec4 scale;
};

//* Layout
layout (local_size_x_id = 1, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 1) buffer SSBO{
    LRParticle particles[];
} ssbo;

layout(set = 0, binding = 3) buffer AdditionalData{
    mat4 D;   
    float averageDensityError;
    uint frameIndex;
    float pad[2];
} additionalData;

layout(set = 0, binding = 4) buffer VolumeMapTransforms{
    VolumeMapTransform transform[];
} volumeMaps;

layout(set = 0, binding = 5) uniform sampler volumeMapSampler; 
layout(set = 0, binding = 6) uniform texture3D sdfTexture[]; 
 
layout( push_constant ) uniform Settings{
    vec4 g; 

    float r_LR;         
    float h_LR; 
    float rho0; 
    float mass;

    float maxCompression;	
    float dt;	 
    float DOMAIN_WIDTH; 
    float DOMAIN_HEIGHT;  

    float sleepingSpeed;
    float h_HR;
    float theta;                               
    float rhoAir;                                 
    
    vec4 windDirection;      

    float dragCoefficient;                
    uint n_HR; 
    float scale_W;
    float scale_GradW;
    float A_LR; 
    float v_max;
    float pad0;
    float pad1; 
} settings;

layout(set = 1, binding = 0) buffer GridLookUpStorage{
    ParticleGridEntry entries[];
} gridLookup;

layout(set = 1, binding = 2) buffer StartringIndicesStorage{
    uint startingIndices[];
};

//* Functions

uint calculateCellKey(uvec3 cell){
    return (cell.x * 3079 + cell.y * 1543 + cell.z * 389) % gridLookup.entries.length();
}

float frobenius(mat3 m) {
  return sqrt(dot(m[0],m[0]) + dot(m[1],m[1]) + dot(m[2],m[2]));
}

float W(float r, float h){
    float v = h - r;
    return v * v * v * settings.scale_W;
}
vec3 gradW(vec3 r, float h){
    float rl = length(r);
    float v = h - rl;
    vec3 dir = rl <= EPSILON ? vec3(0) : normalize(r);
    return -v * v * settings.scale_GradW* dir;
}

float trace(mat3 m){
    return m[0][0] + m[1][1] + m[2][2];
}

//* Macros

#define for_all_fluid_neighbors(code) { \
    ivec3 particleCell = ivec3(floor(vec3(p.position.xyz / settings.h_LR))); \
    for (int k = -1; k <= 1; k++){ \
        for (int l = -1; l <= 1; l++){ \
            for (int m = -1; m <= 1; m++){ \
                ivec3 cell = ivec3(particleCell.x + k, particleCell.y + l, particleCell.z + m); \
                uint cellKey = calculateCellKey(uvec3(cell)); \
                uint startIndex = startingIndices[cellKey]; \
                for(uint i = startIndex; i < gridLookup.entries.length(); i++) { \
                    if(gridLookup.entries[i].cellKey != cellKey){ \
                        break; \
                    } \
                    uint particleIndex = gridLookup.entries[i].particleIndex; \
                    LRParticle pi = ssbo.particles[particleIndex]; \
                    vec3 p_pi = p.position.xyz - pi.position.xyz;\
                    float r = length(p_pi); \
                    if (r < settings.h_LR){\
                        code \
                    }\
                } \
            }  \
        }  \
    } \
}

#define for_all_volume_maps(code) { \
    for (int i = 0; i < volumeMaps.transform.length(); i++){ \
    if(volumeMaps.transform[i].position.w == 0.0){\
        continue;\
    }\
        vec3 samplePosition = ((p.position.xyz - volumeMaps.transform[i].position.xyz)  * volumeMaps.transform[i].scale.xyz) + 0.5; \
        vec4 vM = texture(sampler3D(sdfTexture[i], volumeMapSampler), samplePosition); \
        vec3 p_pi = vM.rgb; \
        float volume = vM.a; \
        float r = length(p_pi); \
        if(r < settings.h_LR){ \
            code \
        }\
    }\
}

// mat3 D = mat3(vec3(52794.90, 0.03, 0.00),
// vec3(0.03, 24784.49, 0.00),
// vec3(0.00, 0.00, 24784.31));

mat3 rotateX(float theta) {
    float c = cos(theta);
    float s = sin(theta);
    return mat3(
        vec3(1, 0, 0),
        vec3(0, c, -s),
        vec3(0, s, c)
    );
}

// Rotation matrix around the Y axis.
mat3 rotateY(float theta) {
    float c = cos(theta);
    float s = sin(theta);
    return mat3(
        vec3(c, 0, s),
        vec3(0, 1, 0),
        vec3(-s, 0, c)
    );
}

// Rotation matrix around the Z axis.
mat3 rotateZ(float theta) {
    float c = cos(theta);
    float s = sin(theta);
    return mat3(
        vec3(c, -s, 0),
        vec3(s, c, 0),
        vec3(0, 0, 1)
    );
}

mat3 rotate10DegXYZ = rotateX(10) * rotateY(10) * rotateZ(10);

void main(){


    uint particleID = gl_GlobalInvocationID.x;;
    LRParticle p = ssbo.particles[particleID];

    //* Strain & Stress 
    mat3 deformationGradient = mat3(0.f);
    mat3 D = mat3(0.f);

    if(additionalData.frameIndex != 0){
        D = mat3(additionalData.D);
    }

    //* Drag
    // vec3 relativeVelocity = settings.windDirection.xyz - p.velocity.xyz;
    vec3 relativeVelocity = p.averageN.xyz - p.velocity.xyz;
    float occluded = 0.866; //* 30Â° cone 0.966;

    for_all_fluid_neighbors(
        if(particleIndex == particleID){
            continue;
        }

        //* Strain & Stress 
        vec3 gradient = gradW(p_pi, settings.h_LR);
        deformationGradient += pi.V * outerProduct(gradient, p.velocity.xyz - pi.velocity.xyz);

        if(additionalData.frameIndex == 0){
            D += (1.f / (pi.rho)) * outerProduct(gradient, gradient);
        }

        //* Drag
        occluded = max(occluded, dot(normalize(relativeVelocity), normalize(p_pi)));
    )

    for_all_volume_maps(
        vec3 normal = normalize(-p_pi.xyz);
        vec3 startingVec = rotate10DegXYZ * normal;
        // Determine 2 orthogonal vectors on the surface
        vec3 t1 = normalize(cross(normal, startingVec));
        vec3 t2 = normalize(cross(normal, t1));
        // Determine 4 points using above vectors
        float d = 0.5 * settings.r_LR;
        vec3 surfacePoint = p.position.xyz + p_pi.xyz;
        vec3 additionalSurfacePoints[4];
        additionalSurfacePoints[0] = surfacePoint + d * t1;
        additionalSurfacePoints[1] = surfacePoint - d * t1;
        additionalSurfacePoints[2] = surfacePoint + d * t2;
        additionalSurfacePoints[3] = surfacePoint - d * t2;

        for(int k = 0; k < 4; k++){
            vec3 p_pk = additionalSurfacePoints[k] - p.position.xyz;
            vec3 gradient = gradW(p_pk, settings.h_LR);
            deformationGradient += (0.25 * volume) * outerProduct(gradient, p.velocity.xyz - vec3(0));
        }

        vec3 gradient = gradW(p_pi, settings.h_LR);
        // deformationGradient += volume * outerProduct(gradient, p.velocity.xyz - vec3(0));

        if(additionalData.frameIndex == 0){
            D += (1.f / settings.rho0) * outerProduct(gradient, gradient);
        }

        //* Drag
        occluded = max(occluded, dot(normalize(relativeVelocity), normalize(p_pi)));
    )

    //* https://dl.acm.org/doi/pdf/10.1145/2019406.2019410
    //? http://gamma.cs.unc.edu/granular/narain-2010-granular.pdf
    if(additionalData.frameIndex == 0){
        float pRhoSq = (p.rho ) * (p.rho );
        D *= (2.f * settings.mass * settings.mass * settings.dt) / pRhoSq;
        D = inverse(D);
    }

    if(particleID == 342 && additionalData.frameIndex == 0){
        additionalData.D = mat4(D);    
    }

    mat3 strainTensor = 0.5f * (deformationGradient + transpose(deformationGradient));

    mat3 stressTensor = D * strainTensor;


    mat3 meanHydrostaticStressTensor = 0.5f * trace(stressTensor) * mat3(1.f);
    mat3 deviatoricStressTensor = stressTensor - meanHydrostaticStressTensor;
    
    p.deviatoricStress = mat4(deviatoricStressTensor);

    //* Drag
    //? https://cg.informatik.uni-freiburg.de/publications/2017_CAG_generalizedDragForce_v2.pdf
    float dragWeight = max(0, min(1, 1 - occluded)); 
    float crossSectionalArea = dragWeight * settings.A_LR; 
    vec3 dragForce = (0.5 * settings.rhoAir * (length(relativeVelocity) * relativeVelocity) * settings.dragCoefficient * crossSectionalArea);
    p.externalForce.xyz += dragForce;

    // p.averageN.xyz = averageParticleDirection;

    ssbo.particles[particleID] = p;
}
