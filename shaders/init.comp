#version 460
#define VULKAN 100
#define EPSILON 0.0000001f
#define PI      3.1415926f


#define UINT_MAX (0xffffffff)

layout (local_size_x_id = 1, local_size_y = 1, local_size_z = 1) in;

struct LRParticle{
    vec2 position;
    vec2 predPosition;
    vec2 velocity;
    vec2 externalForce;
    vec2 internalForce;
    float rho;
    float p;
    float V;
    float a;
    vec2 d;
    mat2 stress;
    vec2 dijpj;
    float dpi;
    float lastP;
    float densityAdv;
    float pad0;
    float pad1;
    float pad2;
};



layout(set = 0, binding = 1) buffer SSBO{
    LRParticle particles[];
} ssbo;

layout( push_constant ) uniform Settings{
    vec2 g; 
    float r_LR;                 
    float h_LR; 

    float rho0; 
    float mass;
    float maxCompression;	  
    float dt;	 

    float DOMAIN_WIDTH; 
    float DOMAIN_HEIGHT;  
    float sleepingSpeed;
    float h_HR;

    float theta;       
    float sigma;                           
    float alpha;                             
    uint n_HR;                              
    
    vec2 windDirection;                     
    float dragCoefficient;                
    float rhoAir;          
} settings;


struct ParticleGridEntry{
    uint particleIndex;
    uint cellKey;
};

layout(set = 1, binding = 0) buffer GridLookUpStorage{
    ParticleGridEntry entries[];
} gridLookup;

layout(set = 1, binding = 2) buffer StartringIndicesStorage{
    uint startingIndices[];
};


uint calculateCellKey(uvec2 cell){
    return (cell.x * 3079 + cell.y * 1543) % gridLookup.entries.length();
}

void main(){
    uint particleID = gl_GlobalInvocationID.x;;
    LRParticle p = ssbo.particles[particleID];

    p.externalForce = settings.g * settings.mass;

    // p.velocity += settings.g * settings.dt;
    // p.predPosition = p.position + (p.velocity + settings.g * settings.dt) * 1.f/120.f; 
    p.predPosition = p.position;
    //Todo: Prediction required?

    ssbo.particles[particleID] = p;

    ivec2 gridCell = ivec2(floor(vec2(p.predPosition / settings.h_LR)));
    
    uint cellKey = calculateCellKey(gridCell);

    gridLookup.entries[particleID].particleIndex = particleID;
    gridLookup.entries[particleID].cellKey = cellKey;
    startingIndices[particleID] = UINT_MAX;
}
