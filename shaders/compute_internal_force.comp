#version 460
#define VULKAN 100
#define EPSILON 0.0000001f
#define PI      3.1415926f
#define BUFFER_A 0
#define BUFFER_B 1
#extension GL_EXT_nonuniform_qualifier : require
layout (local_size_x_id = 1, local_size_y = 1, local_size_z = 1) in;

struct LRParticle{
    vec2 position;
    vec2 predPosition;
    vec2 velocity;
    vec2 externalForce;
    vec2 internalForce;
    float rho;
    float p;
    float V;
    float a;
    vec2 d;
    mat2 stress;
    vec2 dijpj;
    float dpi;
    float lastP;
    float densityAdv;
    float pad0;
    float pad1;
    float pad2;
};


layout(set = 0, binding = BUFFER_B) readonly buffer StorageInput{
    LRParticle particles[];
} inStorage;

layout(set = 0, binding = BUFFER_A) buffer StorageOutput{
    LRParticle particles[];
} outStorage;

layout( push_constant ) uniform Settings{
    vec2 g; 
    float r_LR;                 
    float h_LR; 

    float rho0; 
    float mass;
    float maxCompression;	  
    float dt;	 

    float DOMAIN_WIDTH; 
    float DOMAIN_HEIGHT;  
    float sleepingSpeed;
    float h_HR;

    float theta;       
    float sigma;                           
    float alpha;                             
    uint n_HR;                              
    
    vec2 windDirection;                     
    float dragCoefficient;                
    float rhoAir;          
} settings;

struct ParticleGridEntry{
    uint particleIndex;
    uint cellKey;
};

layout(set = 1, binding = 0) buffer GridLookUpStorage{
    ParticleGridEntry entries[];
} gridLookup;

layout(set = 1, binding = 2) buffer StartringIndicesStorage{
    uint startingIndices[];
};

uint calculateCellKey(uvec2 cell){
    return (cell.x * 3079 + cell.y * 1543) % gridLookup.entries.length();
}

float W(float r, float h){
    float volume = PI * pow(h, 4.f) / 6.f;
    return (h - r) * (h - r) / volume;
}
vec2 gradW(vec2 rij, float h){
    float r = length(rij);
    vec2 dir = r <= EPSILON ? vec2(0) : normalize(rij); 
    float scale = -12.f / (PI * pow(h, 4.f));
    float slope = scale * (r - h);
    return -dir * slope;
}

vec2 gradW(float r, vec2 rij, float h){
    vec2 dir = r <= EPSILON ? vec2(0) : normalize(rij); 
    float scale = -12.f / (PI * pow(h, 4.f));
    float slope = scale * (r - h);
    return -dir * slope;  
}


layout(set = 0, binding = 5) uniform sampler volumeMapSampler; 
layout(set = 0, binding = 6) uniform texture2D sdfTexture[]; 

#define for_all_fluid_neighbors(code) { \
    ivec2 particleCell = ivec2(floor(vec2(p.predPosition / settings.h_LR))); \
    for (int k = -1; k <= 1; k++){ \
        for (int l = -1; l <= 1; l++){ \
            ivec2 cell = ivec2(particleCell.x + k, particleCell.y + l); \
            uint cellKey = calculateCellKey(uvec2(cell)); \
            uint startIndex = startingIndices[cellKey]; \
            for(uint i = startIndex; i < gridLookup.entries.length(); i++) { \
                if(gridLookup.entries[i].cellKey != cellKey){ \
                    break; \
                } \
                uint particleIndex = gridLookup.entries[i].particleIndex; \
                LRParticle pi = inStorage.particles[particleIndex]; \
                vec2 p_pi = p.predPosition - pi.predPosition;\
                float r = length(p_pi); \
                if (r < settings.h_LR){\
                    code \
                }\
            } \
        }  \
    } \
}

#define for_all_volume_maps(code) { \
    for (int i = 0; i < volumeMaps.transform.length(); i++){ \
        vec2 samplePosition = (p.predPosition - volumeMaps.transform[i].position) / volumeMaps.transform[i].scale; \
        vec3 vM = texture(sampler2D(sdfTexture[i], volumeMapSampler), samplePosition).rgb; \
        vec2 p_pi = vM.gb; \
        float volume = vM.r; \
        float r = length(p_pi); \
        if(r < settings.h_LR){ \
            code \
        }\
    }\
}

struct VolumeMapTransform{
    vec2 position;
    vec2 scale;
};

layout(set = 0, binding = 4) buffer VolumeMapTransforms{
    VolumeMapTransform transform[];
} volumeMaps;

void main(){
    uint particleID = gl_GlobalInvocationID.x;;
    LRParticle p = inStorage.particles[particleID];
    //* Init pressure internalForce
    vec2 internalForce = vec2(0.f);

   
    float pRhoSq = p.rho * p.rho;

    for_all_fluid_neighbors(
        if(particleIndex == particleID){
            continue;
        }
       
        //* Pressure calculation
        float piRhoSq =  pi.rho *  pi.rho;
        vec2 gradient = gradW(p_pi, settings.h_LR);
        
        internalForce += settings.mass * ((p.p / pRhoSq) + (pi.p / piRhoSq)) * gradient;
        
        // internalForce += settings.mass * ((p.stress / pRhoSq) + (pi.stress / piRhoSq)) * gradient;
        
    )

    for_all_volume_maps(
        vec2 gradient = gradW(p_pi, settings.h_LR);
        
        internalForce += (volume * settings.rho0) * (p.p / pRhoSq) * gradient; 
        
        // internalForce += (volume * settings.rho0) * (p.stress / pRhoSq) * gradient;
    )

    internalForce *= -settings.mass;

    p.internalForce = internalForce; 

    outStorage.particles[particleID] = p;
}


//Todo: https://animation.rwth-aachen.de/media/papers/2015-SCA-DFSPH.pdf

// file:///C:/Users/andre/Downloads/Interactive_SPH_simulation_and_rendering_on_the_GP.pdf