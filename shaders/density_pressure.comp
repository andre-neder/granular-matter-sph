#version 450
#define VULKAN 100

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

struct Particle{
  vec2 position;
  vec2 velocity;
  vec2 force;
  float rho;
  float p;
};

layout(set = 0, binding = 0) buffer StorageInput{
    Particle particles[];
} inStorage;

layout(set = 0, binding = 1) buffer StorageOutput{
    Particle particles[];
} outStorage;


layout(set = 0, binding = 2) uniform SPHSettings{
  vec2 G;                 // external (gravitational) forces
  float PI;
  float REST_DENS;  // rest density
  // 4
  float GAS_CONST; // const for equation of state
  float KERNEL_RADIUS;		   // kernel radius
  float KERNEL_RADIUS_SQ;		   // radius^2 for optimization
  float MASS;		   // assume all particles have the same mass
  // 8
  float VISC;	   // viscosity constant
  float DT;	   // integration timestep

  // smoothing kernels defined in MÃ¼ller and their gradients
  // adapted to 2D per "SPH Based Shallow Water Simulation" by Solenthaler et al.
  float POLY6;
  float SPIKY_GRAD;
  // 12
  float VISC_LAP;

  // simulation parameters
  float BOUNDARY_EPSILON; // boundary epsilon
  float BOUNDARY_DAMPING;
  float DOMAIN_WIDTH;
  // 16
  float DOMAIN_HEIGHT;

  float pad0, pad1, pad2;
  // 20
} sphSettings;

Particle readCurrentParticle(){
    uint particleID = gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * gl_NumWorkGroups.x;
    return inStorage.particles[particleID];
}
void writeCurrentParticle(in Particle p){
    uint particleID = gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * gl_NumWorkGroups.x;
    outStorage.particles[particleID] = p;
}

void main(){
    Particle p = readCurrentParticle();

    p.rho = 0.f;
    for (int i = 0; i< inStorage.particles.length();i++)
    {
        Particle pi = inStorage.particles[i];
        vec2 p_pi = pi.position - p.position;
        float r2 = dot(p_pi, p_pi);

        if (r2 < sphSettings.KERNEL_RADIUS_SQ)
        {
            p.rho += sphSettings.MASS * sphSettings.POLY6 * pow(sphSettings.KERNEL_RADIUS_SQ - r2, 3.f);
        }
    }
    p.p = sphSettings.GAS_CONST * (p.rho - sphSettings.REST_DENS);

    writeCurrentParticle(p);
}
