#version 460
#define VULKAN 100
#define EPSILON 0.0000001f
#define BUFFER_A 0
#define BUFFER_B 1

layout (local_size_x_id = 1, local_size_y = 1, local_size_z = 1) in;

struct LRParticle{
    vec2 position;
    vec2 predPosition;
    vec2 velocity;
    vec2 predVelocity;
    vec2 internalForce;
    float rho;
    float p;
    float V;
    float boundaryVolume;
    vec2 boundaryNormal;
    mat2 stress;
    uint fluidNeighbors[31];
    uint fluidNeighborCount;
};

layout(set = 0, binding = BUFFER_A) buffer StorageInput{
    LRParticle particles[];
} inStorage;

layout(set = 0, binding = BUFFER_B) buffer StorageOutput{
    LRParticle particles[];
} outStorage;

layout(set = 0, binding = 3) buffer BoundaryStorage{
    LRParticle particles[];
} boundary;

layout( push_constant ) uniform Settings{
    vec2 g; 
    float particleRadius;                 
    float kernelRadius; 

    float rho0; 
    float mass;
    float stiffness;	  
    float dt;	 

    float DOMAIN_WIDTH; 
    float DOMAIN_HEIGHT;  
    float sleepingSpeed;
    float pad2;

    float theta;       
    float sigma;                           
    float alpha;                             
    float beta;                              
    
    float C;                                
    float dragCoefficient;                
    float rhoAir;                             
    float pad3;
} settings;


void main(){
    uint particleID = gl_GlobalInvocationID.x;;
    LRParticle p = inStorage.particles[particleID];

    // Semi-implicit euler
    p.position += p.velocity * settings.dt;
    p.velocity += (p.internalForce / settings.mass) * settings.dt;

    // Forward Euler
    // p.velocity += p.internalForce * settings.dt;
    // p.position += p.velocity * settings.dt;

    outStorage.particles[particleID] = p;
}
