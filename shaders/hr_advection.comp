#version 460
#define VULKAN 100
#define EPSILON 0.0000001f
#define PI      3.1415926f



#extension GL_EXT_nonuniform_qualifier : require
layout (local_size_x_id = 1, local_size_y = 1, local_size_z = 1) in;

struct HRParticle{
    vec3 position;
    vec3 velocity;
    vec4 color;
};

struct LRParticle{
    vec3 position;
    vec3 velocity;
    vec4 externalForce;
    vec3 internalForce;
    vec4 d;
    vec4 dijpj;
    mat4 stress;
    mat4 deviatoricStress;

    float rho;
    float p;
    float V;
    float a;
    float dpi;
    float lastP;
    float densityAdv;
    float pad0;
    vec4 averageN;
    vec4 color;
};

layout(set = 0, binding = 1) readonly buffer SSBO_LR{
    LRParticle particles[];
} ssbo_lr;

layout(set = 0, binding = 2) buffer SSBO_HR{
    HRParticle particles[];
} ssbo_hr;

layout( push_constant ) uniform Settings{
    vec4 g; 

    float r_LR;         
    float h_LR; 
    float rho0; 
    float mass;

    float maxCompression;	
    float dt;	 
    float DOMAIN_WIDTH; 
    float DOMAIN_HEIGHT;  

    float sleepingSpeed;
    float h_HR;
    float theta;                               
    float rhoAir;                                 
    
    vec4 windDirection;      

    float dragCoefficient;                
    uint n_HR; 
    float scale_W;
    float scale_GradW;
    float A_LR; 
    float v_max;
    float pad0;
    float pad1; 
} settings;

struct ParticleGridEntry{
    uint particleIndex;
    uint cellKey;
};

layout(set = 1, binding = 0) buffer GridLookUpStorage{
    ParticleGridEntry entries[];
} gridLookup;

layout(set = 1, binding = 2) buffer StartringIndicesStorage{
    uint startingIndices[];
};



uint calculateCellKey(uvec3 cell){
    return (cell.x * 3079 + cell.y * 1543 + cell.z * 389) % gridLookup.entries.length();
}

float w(float d){
    return max(0, pow(1.0 - (d * d / (9.0 * settings.r_LR * settings.r_LR)), 3));
}


layout(set = 0, binding = 5) uniform sampler volumeMapSampler; 
layout(set = 0, binding = 6) uniform texture3D sdfTexture[]; 

// modified for advection
#define for_all_fluid_neighbors(code) { \
    ivec3 particleCell = ivec3(floor(vec3(p.position / settings.h_LR))); \
    for (int k = -1; k <= 1; k++){ \
        for (int l = -1; l <= 1; l++){ \
            for (int m = -1; m <= 1; m++){ \
                ivec3 cell = ivec3(particleCell.x + k, particleCell.y + l, particleCell.z + m); \
                uint cellKey = calculateCellKey(uvec3(cell)); \
                uint startIndex = startingIndices[cellKey]; \
                for(uint i = startIndex; i < gridLookup.entries.length(); i++) { \
                    if(gridLookup.entries[i].cellKey != cellKey){ \
                        break; \
                    } \
                    uint particleIndex = gridLookup.entries[i].particleIndex; \
                    LRParticle pi = ssbo_lr.particles[particleIndex]; \
                    vec3 p_pi = p.position - pi.position;\
                    float r = length(p_pi); \
                    if (r < settings.h_HR){\
                        code \
                    }\
                } \
            }  \
        }  \
    } \
}


#define for_all_volume_maps(code) { \
    for (int i = 0; i < volumeMaps.transform.length(); i++){ \
        if(volumeMaps.transform[i].position.w == 0.0){\
            continue;\
        }\
        vec3 samplePosition = ((p.position - volumeMaps.transform[i].position.xyz)  * volumeMaps.transform[i].scale.xyz) + 0.5; \
        vec4 vM = texture(sampler3D(sdfTexture[i], volumeMapSampler), samplePosition); \
        vec3 p_pi = vM.rgb; \
        float volume = vM.a; \
        float r = length(p_pi); \
        if(r < settings.h_HR){ \
            code \
        }\
    }\
}

struct VolumeMapTransform{
    vec4 position;
    vec4 scale;
};

layout(set = 0, binding = 4) buffer VolumeMapTransforms{
    VolumeMapTransform transform[];
} volumeMaps;


mat3 rotateX(float theta) {
    float c = cos(theta);
    float s = sin(theta);
    return mat3(
        vec3(1, 0, 0),
        vec3(0, c, -s),
        vec3(0, s, c)
    );
}

// Rotation matrix around the Y axis.
mat3 rotateY(float theta) {
    float c = cos(theta);
    float s = sin(theta);
    return mat3(
        vec3(c, 0, s),
        vec3(0, 1, 0),
        vec3(-s, 0, c)
    );
}

// Rotation matrix around the Z axis.
mat3 rotateZ(float theta) {
    float c = cos(theta);
    float s = sin(theta);
    return mat3(
        vec3(c, -s, 0),
        vec3(s, c, 0),
        vec3(0, 0, 1)
    );
}

mat3 rotate10DegXYZ = rotateX(10) * rotateY(10) * rotateZ(10);

void main(){
    uint particleID = gl_GlobalInvocationID.x;;
    HRParticle p = ssbo_hr.particles[particleID];

    vec3 averageWeightedVelocity = vec3(0);
    float overallWeight = 0.0;
    float argMaxWeight = 0;
    float maxWeight = 0;

    float rho = 0;

    for_all_fluid_neighbors(
        float weight = w(r);
        averageWeightedVelocity += weight * pi.velocity;
        rho += weight * pi.rho;

        overallWeight += weight;   

        bool weightIsGreater = weight > maxWeight;
        maxWeight = weightIsGreater ? weight : maxWeight;
        argMaxWeight =  weightIsGreater ? r : argMaxWeight;
        
    )
    
    overallWeight = max(EPSILON, overallWeight);
    float invOverallWeight = (1.0 / overallWeight);
    rho *= invOverallWeight;

    // Velocity field
    vec3 velocity = invOverallWeight * averageWeightedVelocity;

    // Weighting factor
    float c1 = w(settings.r_LR);
    float c2 = 0.6;
    float alpha = (maxWeight <= c1 || maxWeight / overallWeight >= c2) ? (1.0 - maxWeight) : 0.0;

    //external force
    vec3 externalForce = settings.g.xyz * settings.mass;

    // weighted target velocity
    vec3 targetVelocity = (1.0 - alpha) * velocity + alpha * (p.velocity + settings.dt * (externalForce / settings.mass));

    // integrate position 
    p.position += settings.dt * p.velocity;

    for_all_volume_maps(
        vec3 normal = normalize(-p_pi.xyz);
        
        float weight = w(r);
        // counteract normal velocity
        // float n_factor = dot(targetVelocity, normal); 
        // float t_factor = floor(max(-dot(normalize(externalForce), normal), 0)); // 0 for walls 1 for floor

        // vec3 v_n = n_factor * normal; // normal part
        // vec3 v_t = targetVelocity - v_n; // tangential part
        // vec3 v_c = v_n + v_t * t_factor; // counteracting velocity
        targetVelocity -= (weight * targetVelocity); 
       

        // limit position to plane surface
        float dist = dot(p_pi.xyz, normal) - settings.r_LR ;
        p.position += (-dist < 0.0) ? (dist + settings.r_LR) * normal : vec3(0);
    )
    
    // Integrate v
    p.velocity = targetVelocity;


    ssbo_hr.particles[particleID] = p;
}
