#version 450
#define VULKAN 100
#define EPSILON 0.0000001f
#define PI      3.1415926f

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

struct Particle{
  vec2 position;
  vec2 predPosition;
  vec2 velocity;
  vec2 predVelocity;
  vec2 pressureAcceleration;
  float rho;
  float p;
  float V;
  float psi_b; 
  float pad1; 
  float pad2; 
};

layout(set = 0, binding = 0) buffer StorageInput{
    Particle particles[];
} inStorage;

layout(set = 0, binding = 1) buffer StorageOutput{
    Particle particles[];
} outStorage;

layout(set = 0, binding = 3) buffer BoundaryStorage{
    Particle particles[];
} boundary;

layout(set = 0, binding = 2) uniform SPHSettings{
  vec2 G;                 // external (gravitational) pressureAccelerations
  float padPI;
  float rhoRest;  // rest density
  // 4
  float GAS_CONST; // const for equation of state
  float kernelRadius;		   // kernel radius
  float volume;		   // radius^2 for optimization
  float MASS;		   // assume all particles have the same mass
  // 8
  float VISC;	   // viscosity constant //! unused
  float dt;	   // integration timestep

  // smoothing kernels defined in MÃ¼ller and their gradients
  // adapted to 2D per "SPH Based Shallow Water Simulation" by Solenthaler et al.
  float POLY6; //! unused
  float SPIKY_GRAD; //! unused
  // 12
  float VISC_LAP; //! unused

  // simulation parameters
  float BOUNDARY_EPSILON; // boundary epsilon
  float BOUNDARY_DAMPING;
  float DOMAIN_WIDTH;
  // 16
  float DOMAIN_HEIGHT;

  float pad0, pad1, pad2;
  // 20
} sphSettings;

uint particleID = gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * gl_NumWorkGroups.x;

Particle readCurrentParticle(){
    return inStorage.particles[particleID];
}
void writeCurrentParticle(in Particle p){
    outStorage.particles[particleID] = p;
}

// https://github.com/InteractiveComputerGraphics/SPlisHSPlasH/blob/master/SPlisHSPlasH/SPHKernels.h
float W(float rij, float h){
    // float res = 0.f;
    // float q = rij / h;
    // float h3 = h * h * h;
    // float k = 8.f / (PI * h3);
    // if(q <= 1.f){
    //     if(q <= 0.5f){
    //         float q2 = q * q;
    //         float q3 = q2 * q;
    //         res = k * (6.f * q3 - 6.f * q2 + 1.f);
    //     }
    //     else{
    //         res = k * (2.f * pow(1.f - q, 3.f));
    //     }
    // }
    // return res;
    float volume = PI * pow(h, 4.f) / 6.f;
    return (h - rij) * (h - rij) / volume;
}


void main(){
    Particle p = readCurrentParticle();

    p.rho = 0.f;
    //* Loop over neighboring particles
    for (int i = 0; i< inStorage.particles.length();i++)
    {
        Particle pi = inStorage.particles[i];
        // if (i == particleID){
        //     continue;
        // }
        vec2 p_pi = p.predPosition - pi.predPosition;
        float r = length(p_pi);
       
        if (r < sphSettings.kernelRadius)
        {
            p.rho += W(r, sphSettings.kernelRadius);
        }
    }
    p.rho *= sphSettings.MASS;
    
    // float sumW_b = 0.f;
    // float boundaryDensity = 0.f;
    //* Loop over all boundary particles
    // for (int i = 0; i< boundary.particles.length();i++)
    // {
    //     Particle pb = boundary.particles[i];
    //     vec2 p_pb = p.predPosition - pb.position;
    //     float r = length(p_pb);
    //     if (r < sphSettings.kernelRadius)
    //     {
    //         // boundaryDensity += (sphSettings.rhoRest * pb.V) * W(r, sphSettings.kernelRadius);
    //         sumW_b += W(r, sphSettings.kernelRadius);
    //         // boundaryDensity += sphSettings.MASS * W(r, sphSettings.kernelRadius);
    //     }
    // }
    // float V_b = 1.f / sumW_b;
    // float psi_b = V_b * sphSettings.rhoRest;
    // boundaryDensity = psi_b * sumW_b;
    // p.psi_b = psi_b;

    // p.rho = neighborDensity;// + boundaryDensity;
    // p.rho *= sphSettings.rhoRest;
    
    // p.rho = max(p.rho, sphSettings.rhoRest); 

    //* Calculate pressure
    // float deltaRho = p.rho - sphSettings.rhoRest;
    // float nu = 0.01f;
    // float c = 4.42f;
    // float exponent = 7.f;
    //? tait's equation
    // float B = 50.f;// (sphSettings.rhoRest * c * c) / exponent;
    // p.p = B * (pow(p.rho / sphSettings.rhoRest, exponent) - 1.f); 
    // float stiffness = 10.f;
    // p.p = stiffness * (p.rho / sphSettings.rhoRest - 1.f);
    //* Ideal gas equation
    float stiffness = 5.f;
    p.p = stiffness * (p.rho - sphSettings.rhoRest); 
    // p.p = max(p.p, 0.f);

    writeCurrentParticle(p);
}

// volume = mass / density