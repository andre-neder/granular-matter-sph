#version 450
#define VULKAN 100
#define EPSILON 0.0000001f
#define PI      3.1415926f
#define BUFFER_A 0
#define BUFFER_B 1

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

struct Particle{
    vec2 position;
    vec2 predPosition;
    vec2 velocity;
    vec2 predVelocity;
    vec2 pressureAcceleration;
    float rho;
    float p;
    float V;
    float psi_rho0; 
    float pad0, pad1;
    mat2 stress;
};

struct BoundaryParticle{
    vec2 position;
    vec2 normal;
    vec2 velocity;
    vec2 predVelocity;
    vec2 pressureAcceleration;
    float rho;
    float p;
    float V;
    float psi_rho0; 
    float pad0, pad1;
    mat2 stress;
};

layout(set = 0, binding = BUFFER_A) buffer StorageInput{
    Particle particles[];
} inStorage;

layout(set = 0, binding = BUFFER_B) buffer StorageOutput{
    Particle particles[];
} outStorage;

layout(set = 0, binding = 3) buffer BoundaryStorage{
    BoundaryParticle particles[];
} boundary;

layout(set = 0, binding = 2) uniform Settings{
 vec2 G;       
  float rho0;
  float kernelRadius;		   

  float mass;		 
  float stiffness;
  float dt;	  
  float DOMAIN_WIDTH;

  float DOMAIN_HEIGHT;
  float theta;
  float sigma;
  float beta;

  float C;
  float alpha;
  float pad1;
  float pad2;
} settings;

uint particleID = gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * gl_NumWorkGroups.x;

Particle readCurrentParticle(){
    return inStorage.particles[particleID];
}
void writeCurrentParticle(in Particle p){
    outStorage.particles[particleID] = p;
}

//* https://github.com/glslify/glsl-frobenius/blob/master/index.glsl
float frobenius(mat2 m) {
  return sqrt(dot(m[0],m[0]) + dot(m[1],m[1]));
}

float frobenius(mat3 m) {
  return sqrt(dot(m[0],m[0]) + dot(m[1],m[1]) + dot(m[2],m[2]));
}

float rand(){
    return fract(sin(dot(vec2(settings.dt * 25165843.f, settings.dt * 786433), vec2(12.9898, 78.233))) * 43758.5453);
}

float W(float r, float h){
    // float volume = PI * pow(h, 4.f) / 6.f;
    // return (h - rij) * (h - rij) / volume;
    float alpha = 1.5 / (PI * h * h);
    float beta = 2.0 / 3.0;
    float q = r / h;
    if(r < EPSILON){
        return 0;
    }
    if (q >= 0.0 && q < 1.0) {
        return alpha * (1.0 - 1.5 * q * q + 0.75 * q * q * q);
    } else if (q >= 1.0 && q < 2.0) {
        return alpha * 0.25 * (2.0 - q) * (2.0 - q) * (2.0 - q);
    } else {
        return 0.0;
    }
}



vec2 gradW(vec2 rij, float h){
    // float r = length(rij);
    // vec2 dir = r <= EPSILON ? vec2(rand(), rand()) : normalize(rij); 
    // float scale = -12.f / (PI * pow(h, 4.f));
    // float slope = scale * (r - h);
    // return dir * slope;
    float alpha = 1.5 / (PI * h * h);
    float beta = 2.0 / 3.0;
    float r = length(rij);
    float q = r / h;
    if(r < EPSILON){
        return vec2(0.0);
    }
    if (q >= 0.0 && q < 1.0) {
        float coeff = alpha * (-3.0 * q + 2.25 * q * q);
        return coeff * normalize(rij);
    } else if (q >= 1.0 && q < 2.0) {
        float coeff = -0.75 * alpha * (2.0 - q) * (2.0 - q);
        return coeff * normalize(rij);
    } else {
        return vec2(0.0);
    }
}

vec2 gradW(float r, vec2 rij, float h){
    // vec2 dir = r <= EPSILON ? vec2(rand(), rand()) : normalize(rij); 
    // float scale = -12.f / (PI * pow(h, 4.f));
    // float slope = scale * (r - h);
    // return dir * slope;
    float alpha = 1.5 / (PI * h * h);
    float beta = 2.0 / 3.0;
    float q = r / h;
    if(r < EPSILON){
        return vec2(0.0);
    }
    if (q >= 0.0 && q < 1.0) {
        float coeff = alpha * (-3.0 * q + 2.25 * q * q);
        return coeff * normalize(rij);
    } else if (q >= 1.0 && q < 2.0) {
        float coeff = -0.75 * alpha * (2.0 - q) * (2.0 - q);
        return coeff * normalize(rij);
    } else {
        return vec2(0.0);
    }
}
void main(){
    Particle p = readCurrentParticle();

    //* Strain & Stress 
    mat2 velocityGradient = mat2(0.f);
    mat2 D = mat2(0.f);

    //* For all fluid particles
    for (int i = 0; i< inStorage.particles.length();i++)
    {
        Particle pi = inStorage.particles[i];
        vec2 p_pi = p.predPosition - pi.predPosition;
        float r = length(p_pi);
        
        if (r < settings.kernelRadius)
        {
            //* Strain & Stress 
            vec2 gradient = gradW(p_pi, settings.kernelRadius);
            velocityGradient += pi.V * outerProduct(gradient, p.predVelocity - pi.predVelocity);
            D += 1.f / pi.rho * outerProduct(gradient, gradient);
        }
    }

  
    //* For all boundary particles
    for (int i = 0; i < boundary.particles.length();i++)
    {
        BoundaryParticle pb = boundary.particles[i];
        vec2 p_pb = p.predPosition - pb.position;
        float r = length(p_pb);
       
        if (r < settings.kernelRadius)
        {
            //* Strain & Stress 
            vec2 gradient = gradW(r, pb.normal, settings.kernelRadius);
            velocityGradient += pb.V * outerProduct(gradient, p.predVelocity - pb.predVelocity);
            D += 1.f / pb.rho * outerProduct(gradient, gradient);
        }
    }
         
    //* https://dl.acm.org/doi/pdf/10.1145/2019406.2019410
    //? http://gamma.cs.unc.edu/granular/narain-2010-granular.pdf
    D *= (2.f * settings.mass * settings.mass * settings.dt) / (p.rho * p.rho);
    mat2 strainTensor = 0.5f * (velocityGradient + transpose(velocityGradient));
    mat2 stressTensor = inverse(D) * strainTensor;
    mat2 meanHydrostaticStressTensor = 0.5f * (stressTensor[0][0] + stressTensor[1][1]) * mat2(1.f);
    mat2 deviatoricStressTensor = stressTensor - meanHydrostaticStressTensor;

    float alpha = sqrt(2.f) * sin(settings.theta); //* frictional coefficient // sqrt(2.f / 3.f)
    float yield = alpha * p.p; // sqrt(3) *
    p.stress = frobenius(deviatoricStressTensor) <= yield ? deviatoricStressTensor : deviatoricStressTensor * (yield / frobenius(deviatoricStressTensor));
    p.pad0 = frobenius(deviatoricStressTensor);
    p.pad1 = yield;
    // p.cohesion = min(frobenius(stressTensor), settings.beta * settings.beta * settings.C);

    writeCurrentParticle(p);
}

// volume = mass / density