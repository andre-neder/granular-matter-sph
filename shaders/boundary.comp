#version 450
#define VULKAN 100
#define EPSILON 0.0000001f
#define PI      3.1415926f

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

struct BoundaryParticle{
  vec2 position;
  vec2 normal;
  vec2 velocity;
  vec2 predVelocity;
  vec2 force;
  float rho;
  float p;
  float V;
  float psi_rho0; 
  float stress; 
  float pad2; 
};

layout(set = 0, binding = 0) buffer StorageInput{
    BoundaryParticle particles[];
} inStorage;

layout(set = 0, binding = 1) buffer StorageOutput{
    BoundaryParticle particles[];
} outStorage;

layout(set = 0, binding = 3) buffer BoundaryStorage{
    BoundaryParticle particles[];
} boundary;

layout(set = 0, binding = 2) uniform SPHSettings{
  vec2 G;       
  float rho0;
  float kernelRadius;		   

  float mass;		 
  float stiffness;
  float dt;	  
  float DOMAIN_WIDTH;

  float DOMAIN_HEIGHT;
  float pad0, pad1, pad2;

} settings;

BoundaryParticle readCurrentParticle(){
    uint particleID = gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * gl_NumWorkGroups.x;
    return boundary.particles[particleID];
}
void writeCurrentParticle(in BoundaryParticle p){
    uint particleID = gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * gl_NumWorkGroups.x;
    boundary.particles[particleID] = p;
}



// https://github.com/InteractiveComputerGraphics/SPlisHSPlasH/blob/master/SPlisHSPlasH/SPHKernels.h
float W(float rij, float h){
    // float res = 0.f;
    // float q = rij / h;
    // float h3 = h * h * h;
    // float k = 8.f / (PI * h3);
    // if(q <= 1.f){
    //     if(q <= 0.5f){
    //         float q2 = q * q;
    //         float q3 = q2 * q;
    //         res = k * (6.f * q3 - 6.f * q2 + 1.f);
    //     }
    //     else{
    //         res = k * (2.f * pow(1.f - q, 3.f));
    //     }
    // }
    // return res;
    float volume = PI * pow(h, 4.f) / 6.f;
    return (h - rij) * (h - rij) / volume;
}

//* this shader calculates the density of a boundary BoundaryParticle b, summed up over all boundary BoundaryParticle neighbors
void main(){
    BoundaryParticle p_b = readCurrentParticle();
    float delta_b = 0.f;
    for (int i = 0; i< boundary.particles.length();i++)
    {
        BoundaryParticle pi = boundary.particles[i];
        vec2 p_pi = p_b.position - pi.position;
        float r = length(p_pi);

        if (r < settings.kernelRadius)
        {
            delta_b += W(r, settings.kernelRadius);
        }
    }

    p_b.V = 1.f / delta_b;
    p_b.psi_rho0 = settings.rho0 / p_b.V;

    writeCurrentParticle(p_b);
}
