#version 460
#define VULKAN 100
#define EPSILON 0.0000001f
#define PI      3.1415926f
#define BUFFER_A 0
#define BUFFER_B 1

#extension GL_EXT_nonuniform_qualifier : require
layout (local_size_x_id = 1, local_size_y = 1, local_size_z = 1) in;

struct HRParticle{
    vec2 position;
    vec2 velocity;
};

struct LRParticle{
    vec2 position;
    vec2 predPosition;
    vec2 velocity;
    vec2 externalForce;
    vec2 internalForce;
    float rho;
    float p;
    float V;
    float a;
    vec2 d;
    mat2 stress;
    vec2 dijpj;
    float dpi;
    float lastP;
    float densityAdv;
    float pad0;
    float pad1;
    float pad2;
};

layout(set = 0, binding = BUFFER_B) readonly buffer StorageInput{
    LRParticle particles[];
} inStorage;

layout(set = 0, binding = 2) buffer StorageOutput{
    HRParticle particles[];
} outStorage;

layout( push_constant ) uniform Settings{
    vec2 g; 
    float r_LR;                 
    float h_LR; 

    float rho0; 
    float mass;
    float maxCompression;	  
    float dt;	 

    float DOMAIN_WIDTH; 
    float DOMAIN_HEIGHT;  
    float sleepingSpeed;
    float h_HR;

    float theta;       
    float sigma;                           
    float alpha;                             
    uint n_HR;                              
    
    vec2 windDirection;                     
    float dragCoefficient;                
    float rhoAir;          
} settings;

struct ParticleGridEntry{
    uint particleIndex;
    uint cellKey;
};

layout(set = 1, binding = 0) buffer GridLookUpStorage{
    ParticleGridEntry entries[];
} gridLookup;

layout(set = 1, binding = 2) buffer StartringIndicesStorage{
    uint startingIndices[];
};



uint calculateCellKey(uvec2 cell){
    return (cell.x * 3079 + cell.y * 1543) % gridLookup.entries.length();
}

float w(float d){
    return max(0, pow(1.0 - (d * d / (9.0 * settings.r_LR * settings.r_LR)), 3));
}


layout(set = 0, binding = 5) uniform sampler volumeMapSampler; 
layout(set = 0, binding = 6) uniform texture2D sdfTexture[]; 

// modified for advection
#define for_all_fluid_neighbors(code) { \
    ivec2 particleCell = ivec2(floor(vec2(p.position / settings.h_LR))); \
    for (int k = -1; k <= 1; k++){ \
        for (int l = -1; l <= 1; l++){ \
            ivec2 cell = ivec2(particleCell.x + k, particleCell.y + l); \
            uint cellKey = calculateCellKey(uvec2(cell)); \
            uint startIndex = startingIndices[cellKey]; \
            for(uint i = startIndex; i < gridLookup.entries.length(); i++) { \
                if(gridLookup.entries[i].cellKey != cellKey){ \
                    break; \
                } \
                uint particleIndex = gridLookup.entries[i].particleIndex; \
                LRParticle pi = inStorage.particles[particleIndex]; \
                vec2 p_pi = p.position - pi.position;\
                float r = length(p_pi); \
                if (r < settings.h_HR){\
                    code \
                }\
            } \
        }  \
    } \
} 

#define for_all_volume_maps(code) { \
    for (int i = 0; i < volumeMaps.transform.length(); i++){ \
        vec2 samplePosition = (p.position - volumeMaps.transform[i].position) / volumeMaps.transform[i].scale; \
        vec3 vM = texture(sampler2D(sdfTexture[i], volumeMapSampler), samplePosition).rgb; \
        vec2 p_pi = vM.gb; \
        float volume = vM.r; \
        float r = length(p_pi); \
        if(r < settings.h_HR){ \
            code \
        }\
    }\
}

struct VolumeMapTransform{
    vec2 position;
    vec2 scale;
};

layout(set = 0, binding = 4) buffer VolumeMapTransforms{
    VolumeMapTransform transform[];
} volumeMaps;

void main(){
    uint particleID = gl_GlobalInvocationID.x;;
    HRParticle p = outStorage.particles[particleID];

    vec2 averageWeightedVelocity = vec2(0);
    float overallWeight = 0.0;
    float argMaxWeight = 0;
    float maxWeight = 0;

    // vec2 relativeVelocity = settings.windDirection - p.velocity;
    // float occluded = 0.866; //* 30Â° cone
    
    float rho = 0;

    for_all_fluid_neighbors(
        float weight = w(r);
        averageWeightedVelocity += weight * pi.velocity;
        rho += weight * pi.rho;
        // occluded = max(occluded, dot(normalize(relativeVelocity), normalize(p_pi)));

        overallWeight += weight;   
        if(weight > maxWeight){
            maxWeight = weight;
            argMaxWeight = r;
        } 
        
    )

    
    for_all_volume_maps(
        float weight = w(r);
        averageWeightedVelocity += weight * vec2(0);
        overallWeight += weight;   
        if(weight > maxWeight){
            maxWeight = weight;
            argMaxWeight = r;
        }
    )

    overallWeight = max(EPSILON, overallWeight);
    float nanFactor = overallWeight <= EPSILON ? 0.0 : 1.0;

    vec2 velocity = nanFactor * (1.0 / overallWeight) * averageWeightedVelocity;
    rho = nanFactor * (1.0 / overallWeight) * rho;

    float c1 = w(settings.r_LR);
    float c2 = 0.6;
    float alpha = (maxWeight <= c1 || nanFactor * maxWeight / overallWeight >= c2) ? 1.0 - maxWeight : 0.0;

    //? https://cg.informatik.uni-freiburg.de/publications/2017_CAG_generalizedDragForce_v2.pdf
    // float dragWeight = max(0, min(1, 1 - occluded)); 
    // float crossSectionalArea = dragWeight * sqrt((settings.mass / rho) / PI) * 2.f; 
    // vec2 dragForce  = (1.f/2.f * settings.rhoAir * (length(relativeVelocity) * relativeVelocity) * settings.dragCoefficient * crossSectionalArea);
    

    vec2 externalForce = settings.g * settings.mass;// + dragForce;


    // vec2 vel = (p.position + p.velocity * settings.dt) - (p.position);
    // if(length(vel) > settings.sleepingSpeed){
        p.position += settings.dt * p.velocity;
    // }

    p.velocity = (1.0 - alpha) * velocity + alpha * (p.velocity + settings.dt * (externalForce / settings.mass));

    outStorage.particles[particleID] = p;
}
