#version 450
#define UINT_MAX (0xffffffff)
#define EPSILON 0.0000001f
#define PI      3.1415926f
#define BUFFER_A 0
#define BUFFER_B 1

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

struct Particle{
    vec2 position;
    vec2 predPosition;
    vec2 velocity;
    vec2 predVelocity;
    vec2 pressureAcceleration;
    float rho;
    float p;
    float V;
    float psi_rho0; 
    float pad0, pad1;
    mat2 stress;
    float pad[32];
};

layout(set = 0, binding = BUFFER_A) buffer StorageInput{
    Particle particles[];
} inStorage;

layout(set = 0, binding = BUFFER_B) buffer StorageOutput{
    Particle particles[];
} outStorage;

layout(set = 0, binding = 3) buffer BoundaryStorage{
    Particle particles[];
} boundary;

layout(set = 0, binding = 2) uniform Settings{
  vec2 G;       
  float rho0;
  float kernelRadius;		   

  float mass;		 
  float stiffness;
  float dt;	  
  float DOMAIN_WIDTH;

  float DOMAIN_HEIGHT;
  float theta;
  float sigma;
  float beta;

  float C;
  float alpha;
  float pad1;
  float pad2;
} settings;

struct ParticleGridEntry{
    uint particleIndex;
    uint cellKey;
};

layout(set = 1, binding = 0) buffer GridLookUpStorage{
    ParticleGridEntry entries[];
} gridLookup;

layout(set = 1, binding = 2) buffer StartringIndicesStorage{
    uint startingIndices[];
};

uint calculateCellKey(uvec2 cell){
    return (cell.x + cell.y * cell.x);
}

void main(){
    uint particleID = gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * gl_NumWorkGroups.x;
    Particle p_in = inStorage.particles[particleID];
    Particle p_out = p_in;

    //* Same as init 
    vec2 predVelocity = p_in.velocity + settings.G * settings.dt;
    vec2 predPosition = p_in.position + predVelocity * 1.f/120.f;

    ivec2 gridCell = ivec2(floor(vec2(predPosition / settings.kernelRadius)));
    
    uint cellKey = calculateCellKey(gridCell);

    gridLookup.entries[particleID].particleIndex = particleID;
    gridLookup.entries[particleID].cellKey = cellKey;
    startingIndices[particleID] = UINT_MAX;

    // p_out.psi_rho0 = gridCell.x;
    // p_out.pad0 = gridCell.y;
    // p_out.pad1 = cellKey;
    // inStorage.particles[particleID] = p_out;
}
