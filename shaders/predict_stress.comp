#version 460
#define VULKAN 100
#define EPSILON 0.0000001f
#define PI      3.1415926f
#define BUFFER_A 0
#define BUFFER_B 1

layout (local_size_x_id = 1, local_size_y = 1, local_size_z = 1) in;

struct Particle{
    vec2 position;
    vec2 predPosition;
    vec2 velocity;
    vec2 predVelocity;
    vec2 pressureAcceleration;
    float rho;
    float p;
    float V;
    float psi_rho0; 
    float pad0, pad1;
    mat2 stress;
};

struct BoundaryParticle{
    vec2 position;
    vec2 normal;
    vec2 velocity;
    vec2 predVelocity;
    vec2 pressureAcceleration;
    float rho;
    float p;
    float V;
    float psi_rho0; 
    float pad0, pad1;
    mat2 stress;
};

layout(set = 0, binding = BUFFER_A) buffer StorageInput{
    Particle particles[];
} inStorage;

layout(set = 0, binding = BUFFER_B) buffer StorageOutput{
    Particle particles[];
} outStorage;

layout(set = 0, binding = 3) buffer BoundaryStorage{
    BoundaryParticle particles[];
} boundary;

layout( push_constant ) uniform Settings{
    vec2 G; 
    float particleRadius;                 
    float kernelRadius; 

    float rho0; 
    float mass;
    float stiffness;	  
    float dt;	 

    float DOMAIN_WIDTH; 
    float DOMAIN_HEIGHT;  
    float pad1;
    float pad2;

    float theta;       
    float sigma;                           
    float alpha;                             
    float beta;                              
    
    float C;                                
    float dragCoefficient;                
    float rhoAir;                             
    float pad3;
} settings;

struct ParticleGridEntry{
    uint particleIndex;
    uint cellKey;
};

layout(set = 1, binding = 0) buffer GridLookUpStorage{
    ParticleGridEntry entries[];
} gridLookup;

layout(set = 1, binding = 2) buffer StartringIndicesStorage{
    uint startingIndices[];
};


uint calculateCellKey(uvec2 cell){
    return (cell.x * 3079 + cell.y * 1543) % gridLookup.entries.length();
}

//* https://github.com/glslify/glsl-frobenius/blob/master/index.glsl
float frobenius(mat2 m) {
  return sqrt(dot(m[0],m[0]) + dot(m[1],m[1]));
}

float frobenius(mat3 m) {
  return sqrt(dot(m[0],m[0]) + dot(m[1],m[1]) + dot(m[2],m[2]));
}

float rand(){
    return fract(sin(dot(vec2(settings.dt * 25165843.f, settings.dt * 786433), vec2(12.9898, 78.233))) * 43758.5453);
}

float W(float r, float h){
    float volume = PI * pow(h, 4.f) / 6.f;
    return (h - r) * (h - r) / volume;
}
vec2 gradW(vec2 rij, float h){
    float r = length(rij);
    vec2 dir = r <= EPSILON ? vec2(rand(), rand()) : normalize(rij); 
    float scale = -12.f / (PI * pow(h, 4.f));
    float slope = scale * (r - h);
    return -dir * slope;
}

vec2 gradW(float r, vec2 rij, float h){
    vec2 dir = r <= EPSILON ? vec2(rand(), rand()) : normalize(rij); 
    float scale = -12.f / (PI * pow(h, 4.f));
    float slope = scale * (r - h);
    return -dir * slope;
}

void main(){
    uint particleID = gl_GlobalInvocationID.x;;
    Particle p_in = inStorage.particles[particleID];
    Particle p_out = p_in;

    //* Strain & Stress 
    mat2 velocityGradient = mat2(0.f);
    mat2 D = mat2(0.f);

    //* For all fluid particles
    // for (int i = 0; i< inStorage.particles.length();i++)
    // {
    //     Particle pi = inStorage.particles[i];
    //     vec2 p_pi = p_in.predPosition - pi.predPosition;
    //     float r = length(p_pi);
        
    //     if (r < settings.kernelRadius)
    //     {
    //         //* Strain & Stress 
    //         vec2 gradient = gradW(p_pi, settings.kernelRadius);
    //         velocityGradient += pi.V * outerProduct(gradient, p_in.predVelocity - pi.predVelocity);
    //         D += (1.f / pi.rho) * outerProduct(gradient, gradient);
    //     }
    // }

    ivec2 particleCell = ivec2(floor(vec2(p_in.predPosition / settings.kernelRadius)));

    for (int k = -1; k <= 1; k++){
        for (int l = -1; l <= 1; l++){
            // current cell coordinate
            ivec2 cell = ivec2(particleCell.x + k, particleCell.y + l);

            // current cell key
            uint cellKey = calculateCellKey(uvec2(cell));
            
            // index of current entry for cell
            uint startIndex = startingIndices[cellKey];

            // While particle is in the same cell
            for(uint i = startIndex; i < gridLookup.entries.length(); i++)
            {
                if(gridLookup.entries[i].cellKey != cellKey){
                    break;
                }
                // index of particle of current index
                uint particleIndex = gridLookup.entries[i].particleIndex;
                Particle pi = inStorage.particles[particleIndex];

                
                vec2 p_pi = p_in.predPosition - pi.predPosition;
                float r = length(p_pi);
            
                if (r < settings.kernelRadius)
                {
                    //* Strain & Stress 
                    vec2 gradient = gradW(p_pi, settings.kernelRadius);
                    velocityGradient += pi.V * outerProduct(gradient, p_in.predVelocity - pi.predVelocity);
                    D += (1.f / pi.rho) * outerProduct(gradient, gradient);
                }
            }
        } 
    }

  
    //* For all boundary particles
    for (int i = 0; i < boundary.particles.length();i++)
    {
        BoundaryParticle pb = boundary.particles[i];
        vec2 p_pb = p_in.predPosition - pb.position;
        float r = length(p_pb);
       
        if (r < settings.kernelRadius)
        {
            //* Strain & Stress 
            vec2 gradient = gradW(p_pb, settings.kernelRadius);
            //Todo: predvel ??
            velocityGradient += pb.V * outerProduct(gradient, p_in.predVelocity - pb.predVelocity);
            D += (1.f / pb.rho) * outerProduct(gradient, gradient);
        }
    }
    //* https://dl.acm.org/doi/pdf/10.1145/2019406.2019410
    //? http://gamma.cs.unc.edu/granular/narain-2010-granular.pdf
    D *= (2.f * settings.mass * settings.mass * settings.dt) / (p_in.rho * p_in.rho);
    mat2 strainTensor = 0.5f * (velocityGradient + transpose(velocityGradient));
    mat2 stressTensor = inverse(D) * strainTensor;
    mat2 meanHydrostaticStressTensor = 0.5f * (stressTensor[0][0] + stressTensor[1][1]) * mat2(1.f);
    mat2 deviatoricStressTensor = stressTensor - meanHydrostaticStressTensor;
    
    float alpha = sqrt(2.f / 3.f) * sin(settings.theta); //* frictional coefficient
    float yield = sqrt(3.f) * alpha * p_in.p; //* Drucker-Prager yield criterion
    if(p_in.p > EPSILON && frobenius(deviatoricStressTensor) > EPSILON){
        p_out.stress = frobenius(deviatoricStressTensor) <= yield ? deviatoricStressTensor : deviatoricStressTensor * (yield / frobenius(deviatoricStressTensor));
    }
    else{
        p_out.stress = mat2(0);
    }
    // p.cohesion = min(frobenius(stressTensor), settings.beta * settings.beta * settings.C);


    outStorage.particles[particleID] = p_out;
}

// volume = mass / density