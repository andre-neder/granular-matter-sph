#version 450
#define VULKAN 100
#define EPSILON 0.0000001f
#define PI      3.1415926f

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

struct Particle{
  vec2 position;
  vec2 predPosition;
  vec2 velocity;
  vec2 predVelocity;
  vec2 force;
  float rho;
  float p;
  float V;
  float pad0; 
  float pad1; 
  float pad2; 
};

layout(set = 0, binding = 0) buffer StorageInput{
    Particle particles[];
} inStorage;

layout(set = 0, binding = 1) buffer StorageOutput{
    Particle particles[];
} outStorage;

layout(set = 0, binding = 3) buffer BoundaryStorage{
    Particle particles[];
} boundary;

layout(set = 0, binding = 2) uniform SPHSettings{
  vec2 G;                 // external (gravitational) forces
  float padPI;
  float rhoRest;  // rest density
  // 4
  float GAS_CONST; // const for equation of state
  float kernelRadius;		   // kernel radius
  float volume;		   // radius^2 for optimization
  float MASS;		   // assume all particles have the same mass
  // 8
  float VISC;	   // viscosity constant //! unused
  float dt;	   // integration timestep

  // smoothing kernels defined in MÃ¼ller and their gradients
  // adapted to 2D per "SPH Based Shallow Water Simulation" by Solenthaler et al.
  float POLY6; //! unused
  float SPIKY_GRAD; //! unused
  // 12
  float VISC_LAP; //! unused

  // simulation parameters
  float BOUNDARY_EPSILON; // boundary epsilon
  float BOUNDARY_DAMPING;
  float DOMAIN_WIDTH;
  // 16
  float DOMAIN_HEIGHT;

  float pad0, pad1, pad2;
  // 20
} sphSettings;

Particle readCurrentParticle(){
    uint particleID = gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * gl_NumWorkGroups.x;
    return boundary.particles[particleID];
}
void writeCurrentParticle(in Particle p){
    uint particleID = gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * gl_NumWorkGroups.x;
    boundary.particles[particleID] = p;
}


// https://github.com/InteractiveComputerGraphics/SPlisHSPlasH/blob/master/SPlisHSPlasH/SPHKernels.h
float W(float rij, float h){
    float res = 0.f;
    float q = rij / h;
    float h3 = h * h * h;
    float k = 8.f / (PI * h3);
    if(q <= 1.f){
        if(q <= 0.5f){
            float q2 = q * q;
            float q3 = q2 * q;
            res = k * 6.f * q3 - 6.f * q2 + 1.f;
        }
        else{
            res = k * 2.f * pow(1.f - q, 3.f);
        }
    }
    return res;
}

//* this shader calculates the density of a boundary particle b, summed up over all boundary particle neighbors
void main(){
    // Particle p_b = readCurrentParticle();
    // float V = 0.f;
    // for (int i = 0; i< boundary.particles.length();i++)
    // {
    //     Particle pi = boundary.particles[i];
    //     vec2 p_pi = p_b.position - pi.position;
    //     float r = length(p_pi);

    //     if (r < sphSettings.kernelRadius)
    //     {
    //         V += W(r, sphSettings.kernelRadius);
    //     }
    // }

    // p_b.V = 1.f / V;

    // writeCurrentParticle(p_b);
}
