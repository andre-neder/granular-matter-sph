#version 460

#extension GL_EXT_nonuniform_qualifier : require

#define UINT_MAX (0xffffffff)
#define FLOAT_MAX 3.402823466e+38
#define EPSILON 0.0000001f
#define PI      3.1415926f
#define BUFFER_A 0
#define BUFFER_B 1

layout (local_size_x_id = 1, local_size_y = 1, local_size_z = 1) in;

struct LRParticle{
    vec2 position;
    vec2 predPosition;
    vec2 velocity;
    vec2 predVelocity;
    vec2 internalForce;
    float rho;
    float p;
    float V;
    float boundaryVolume;
    vec2 boundaryNormal;
    mat2 stress;
    uint fluidNeighbors[31];
    uint fluidNeighborCount;
};


layout(set = 0, binding = BUFFER_B) buffer StorageInput{
    LRParticle particles[];
} inStorage;

layout(set = 0, binding = BUFFER_A) buffer StorageOutput{
    LRParticle particles[];
} outStorage;

// layout(set = 0, binding = 2) uniform sampler2D imageSampler[]; 
layout(set = 0, binding = 2) uniform sampler volumeMapSampler; 
layout(set = 0, binding = 3) uniform texture2D sdfTexture[]; 
 
layout( push_constant ) uniform Settings{
    vec2 g; 
    float particleRadius;                 
    float kernelRadius; 

    float rho0; 
    float mass;
    float stiffness;	  
    float dt;	 

    float DOMAIN_WIDTH; 
    float DOMAIN_HEIGHT;  
    float sleepingSpeed;
    bool upsamplingEnabled;

    float theta;       
    float sigma;                           
    float alpha;                             
    float beta;                              
    
    float C;                                
    float dragCoefficient;                
    float rhoAir;                             
    float pad3;
} settings;

struct ParticleGridEntry{
    uint particleIndex;
    uint cellKey;
};

layout(set = 1, binding = 0) buffer GridLookUpStorage{
    ParticleGridEntry entries[];
} gridLookup;

layout(set = 1, binding = 2) buffer StartringIndicesStorage{
    uint startingIndices[];
};


uint calculateCellKey(uvec2 cell){
    return (cell.x * 3079 + cell.y * 1543) % gridLookup.entries.length();
}

//* https://github.com/glslify/glsl-frobenius/blob/master/index.glsl
float frobenius(mat2 m) {
  return sqrt(dot(m[0],m[0]) + dot(m[1],m[1]));
}

float frobenius(mat3 m) {
  return sqrt(dot(m[0],m[0]) + dot(m[1],m[1]) + dot(m[2],m[2]));
}

float rand(){
    return fract(sin(dot(vec2(settings.dt * 25165843.f, settings.dt * 786433), vec2(12.9898, 78.233))) * 43758.5453);
}

float W(float r, float h){
    float volume = PI * pow(h, 4.f) / 6.f;
    return (h - r) * (h - r) / volume;
}
vec2 gradW(vec2 rij, float h){
    float r = length(rij);
    vec2 dir = r <= EPSILON ? vec2(rand(), rand()) : normalize(rij); 
    float scale = -12.f / (PI * pow(h, 4.f));
    float slope = scale * (r - h);
    return -dir * slope;
}

vec2 gradW(float r, vec2 rij, float h){
    vec2 dir = r <= EPSILON ? vec2(rand(), rand()) : normalize(rij); 
    float scale = -12.f / (PI * pow(h, 4.f));
    float slope = scale * (r - h);
    return -dir * slope;
}

float sdPlane( vec3 p, vec3 n, float h )
{
  // n must be normalized
  return dot(p,n) + h;
}

float sdPlane( vec2 p, vec2 n, float h )
{
  // n must be normalized
  return dot(p,n) + h;
}

float sdBox( vec3 p, vec3 b )
{
  vec3 q = abs(p) - b;
  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);
}
float sdBox( vec2 p, vec2 b )
{
//   return sdBox(vec3(p, 1), vec3(b, 1));
  vec2 q = abs(p) - b;
  return length(max(q,0.0)) + min(max(q.x, q.y),0.0);
}

vec2 normalBox( vec2 p, vec2 b ){
    vec2 q = abs(p);
    return (q.x > q.y ?  vec2(sign(p.x), 0) : vec2(0, sign(p.y)));
}
// Todo: move to sdf texture to make it a volume map
// float cubicExtension(float r){
//     float h = settings.kernelRadius;
//     if(r < 0){
//         return 1;
//     }
//     else if(r < h){
//         float alpha = 15.f / (14.f * PI * h * h);
//         float q = r / h;
//         if(r < EPSILON){
//             return 0;
//         }
//         if (q >= 0.0 && q < 1.0) {
//             return alpha * (1.f - 1.5f * q * q + 0.75f * q * q * q);
//         } else if (q >= 1.f && q < 2.f) {
//             float beta = (2.f - q);
//             return alpha * 0.25f * beta * beta * beta;
//         } else {
//             return 0.f;
//         }
//     }
//     else{
//         return 0;
//     }
// }

vec2 adjustKernelRadiusOffset(vec2 position){
    return vec2(position.x - 2 * settings.kernelRadius, position.y - 2 * settings.kernelRadius);
}
vec2 adjustKernelRadiusScale(vec2 scale){
    return vec2(scale + 4 * settings.kernelRadius);
}

void main(){


    uint particleID = gl_GlobalInvocationID.x;;
    LRParticle p = inStorage.particles[particleID];
    //* Density
    float rho = 0.f;

    ivec2 particleCell = ivec2(floor(vec2(p.predPosition / settings.kernelRadius)));
    uint fluidNeighborCount = 0;
    for (int k = -1; k <= 1; k++){
        for (int l = -1; l <= 1; l++){
            // current cell coordinate
            ivec2 cell = ivec2(particleCell.x + k, particleCell.y + l);

            // current cell key
            uint cellKey = calculateCellKey(uvec2(cell));
            
            // index of current entry for cell
            uint startIndex = startingIndices[cellKey];

            // While particle is in the same cell
            for(uint i = startIndex; i < gridLookup.entries.length(); i++)
            {
                if(gridLookup.entries[i].cellKey != cellKey){
                    break;
                }
                // index of particle of current index
                uint particleIndex = gridLookup.entries[i].particleIndex;
                LRParticle pi = inStorage.particles[particleIndex];

                vec2 p_pi = p.predPosition - pi.predPosition;
                float r = length(p_pi);
            
                if (r < settings.kernelRadius)
                {
                    //* Density
                    rho += W(r, settings.kernelRadius); 
                    //* Put all fluid neighbors in a list to access them later
                    if (particleIndex != particleID){
                        p.fluidNeighbors[fluidNeighborCount] = particleIndex;
                        fluidNeighborCount++;
                    }
                }
            }
        } 
    }
    rho *= settings.mass;
    p.fluidNeighborCount = fluidNeighborCount;


    float halfBoxSize = settings.DOMAIN_HEIGHT / 4;
    vec2 rigidBodyPositions[] = {
        vec2( 0, 0), // Bottom
        vec2( 0, 0), // Left
        vec2( settings.DOMAIN_WIDTH, 0), // Right
        // vec2( settings.DOMAIN_WIDTH / 2.0 - halfBoxSize - 2 * settings.kernelRadius, - 2 * settings.kernelRadius  ),//with offset
        // vec2( settings.DOMAIN_WIDTH / 2.0 - halfBoxSize, 0),
    };
    vec2 rigidBodyScale[] = {
        vec2(1), vec2(1), vec2(1), 
    //    halfBoxSize * 2 + 4 * settings.kernelRadius, //with offset
        vec2(halfBoxSize * 2),
    };

    //Volume maps
    for (int i = 0; i < rigidBodyPositions.length(); i++){ 
        vec2 samplePosition = (p.predPosition - adjustKernelRadiusOffset(rigidBodyPositions[i])) / adjustKernelRadiusScale(rigidBodyScale[i]);
        vec2 p_pi = texture(sampler2D(sdfTexture[i], volumeMapSampler), samplePosition).gb;
        float r = length(p_pi);
        if(r < settings.kernelRadius){
            float volume = texture(sampler2D(sdfTexture[i], volumeMapSampler), samplePosition).r;
            rho += volume * settings.rho0 * W(r, settings.kernelRadius);
        }
    }

    // rho += p.boundaryVolume * settings.rho0 * W(boundarySD, settings.kernelRadius);

    p.rho = rho;

   
    p.rho = max(p.rho, settings.rho0); 
    float exponent = 7.f;
    float B = settings.stiffness;// (settings.rho0 * c * c) / exponent;
    //? https://forums.dual.sphysics.org/discussion/1804/theory-tait-equation-of-state ???
    //* coles equation
    // float pressure = B * (pow(max(p.rho, settings.rho0) / settings.rho0, exponent) - 1.f); 
    //? https://www.politesi.polimi.it/bitstream/10589/33101/1/2011_12_Pirovano.pdf (3.2)
    //* tait's equation
    float pressure = (settings.rho0 * B) / exponent * (pow(p.rho / settings.rho0, exponent) - 1.f); 

    //? Murnaghan equation of state ???

    //* Ideal gas equation
    // float pressure = settings.stiffness * (rho - settings.rho0); 
    
    p.p = max(pressure, 0.f);     //? required?
    p.V = settings.mass / rho;

    outStorage.particles[particleID] = p;
}

// volume = mass / density

// Todo: file:///C:/Users/andre/Downloads/pcisph%20(2).pdf try this

// Todo: https://cg.informatik.uni-freiburg.de/publications/2013_TVCG_IISPH.pdf try this

// Todo: https://www.politesi.polimi.it/bitstream/10589/33101/1/2011_12_Pirovano.pdf (try pressure corrected sph?)