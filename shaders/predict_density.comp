#version 460
#define UINT_MAX (0xffffffff)
#define EPSILON 0.0000001f
#define PI      3.1415926f
#define BUFFER_A 0
#define BUFFER_B 1

layout (local_size_x_id = 1, local_size_y = 1, local_size_z = 1) in;

struct Particle{
    vec2 position;
    vec2 predPosition;
    vec2 velocity;
    vec2 predVelocity;
    vec2 pressureForce;
    float rho;
    float p;
    float V;
    float psi_rho0; 
    float pad0, pad1;
    mat2 stress;
    uint fluidNeighbors[32];
    uint boundaryNeighbors[14];
    uint fluidNeighborCount;
    uint boundaryNeighborCount;
};


layout(set = 0, binding = BUFFER_B) buffer StorageInput{
    Particle particles[];
} inStorage;

layout(set = 0, binding = BUFFER_A) buffer StorageOutput{
    Particle particles[];
} outStorage;

layout(set = 0, binding = 3) buffer BoundaryStorage{
    Particle particles[];
} boundary;

layout( push_constant ) uniform Settings{
    vec2 g; 
    float particleRadius;                 
    float kernelRadius; 

    float rho0; 
    float mass;
    float stiffness;	  
    float dt;	 

    float DOMAIN_WIDTH; 
    float DOMAIN_HEIGHT;  
    float pad1;
    float pad2;

    float theta;       
    float sigma;                           
    float alpha;                             
    float beta;                              
    
    float C;                                
    float dragCoefficient;                
    float rhoAir;                             
    float pad3;
} settings;

struct ParticleGridEntry{
    uint particleIndex;
    uint cellKey;
};

layout(set = 1, binding = 0) buffer GridLookUpStorage{
    ParticleGridEntry entries[];
} gridLookup;

layout(set = 1, binding = 2) buffer StartringIndicesStorage{
    uint startingIndices[];
};


uint calculateCellKey(uvec2 cell){
    return (cell.x * 3079 + cell.y * 1543) % gridLookup.entries.length();
}

//* https://github.com/glslify/glsl-frobenius/blob/master/index.glsl
float frobenius(mat2 m) {
  return sqrt(dot(m[0],m[0]) + dot(m[1],m[1]));
}

float frobenius(mat3 m) {
  return sqrt(dot(m[0],m[0]) + dot(m[1],m[1]) + dot(m[2],m[2]));
}

float rand(){
    return fract(sin(dot(vec2(settings.dt * 25165843.f, settings.dt * 786433), vec2(12.9898, 78.233))) * 43758.5453);
}

float W(float r, float h){
    float volume = PI * pow(h, 4.f) / 6.f;
    return (h - r) * (h - r) / volume;
}
vec2 gradW(vec2 rij, float h){
    float r = length(rij);
    vec2 dir = r <= EPSILON ? vec2(rand(), rand()) : normalize(rij); 
    float scale = -12.f / (PI * pow(h, 4.f));
    float slope = scale * (r - h);
    return -dir * slope;
}

vec2 gradW(float r, vec2 rij, float h){
    vec2 dir = r <= EPSILON ? vec2(rand(), rand()) : normalize(rij); 
    float scale = -12.f / (PI * pow(h, 4.f));
    float slope = scale * (r - h);
    return -dir * slope;
}


void main(){
    uint particleID = gl_GlobalInvocationID.x;;
    Particle p = inStorage.particles[particleID];
    //* Density
    float rho = 0.f;

    ivec2 particleCell = ivec2(floor(vec2(p.predPosition / settings.kernelRadius)));
    uint fluidNeighborCount = 0;
    for (int k = -1; k <= 1; k++){
        for (int l = -1; l <= 1; l++){
            // current cell coordinate
            ivec2 cell = ivec2(particleCell.x + k, particleCell.y + l);

            // current cell key
            uint cellKey = calculateCellKey(uvec2(cell));
            
            // index of current entry for cell
            uint startIndex = startingIndices[cellKey];

            // While particle is in the same cell
            for(uint i = startIndex; i < gridLookup.entries.length(); i++)
            {
                if(gridLookup.entries[i].cellKey != cellKey){
                    break;
                }
                // index of particle of current index
                uint particleIndex = gridLookup.entries[i].particleIndex;
                Particle pi = inStorage.particles[particleIndex];

                vec2 p_pi = p.predPosition - pi.predPosition;
                float r = length(p_pi);
            
                if (r < settings.kernelRadius)
                {
                    //* Density
                    rho += W(r, settings.kernelRadius); 
                    //* Put all fluid neighbors in a list to access them later
                    if (particleIndex != particleID){
                        p.fluidNeighbors[fluidNeighborCount] = particleIndex;
                        fluidNeighborCount++;
                    }
                }
            }
        } 
    }
    rho *= settings.mass;
    p.fluidNeighborCount = fluidNeighborCount;

  
    //* For all boundary particles
    uint boundaryNeighborCount = 0;
    for (int i = 0; i < boundary.particles.length();i++)
    {
        Particle pb = boundary.particles[i];
        vec2 p_pb = p.predPosition - pb.position;
        float r = length(p_pb);
       
        if (r < settings.kernelRadius)
        {
            //* Density
            rho += pb.psi_rho0 * W(r, settings.kernelRadius);
            //* Put all boundary neighbors in a list to access them later
            p.boundaryNeighbors[boundaryNeighborCount] = i;
            boundaryNeighborCount++;
        }
    }
    p.boundaryNeighborCount = boundaryNeighborCount;
    p.rho = rho;

    
    // p.rho = max(p.rho, settings.rho0); 
    float exponent = 7.f;
    float B = settings.stiffness;// (settings.rho0 * c * c) / exponent;
    //? https://forums.dual.sphysics.org/discussion/1804/theory-tait-equation-of-state ???
    //* coles equation
    // float pressure = B * (pow(max(p.rho, settings.rho0) / settings.rho0, exponent) - 1.f); 
    //? https://www.politesi.polimi.it/bitstream/10589/33101/1/2011_12_Pirovano.pdf (3.2)
    //* tait's equation
    float pressure = (settings.rho0 * B) / exponent * (pow(p.rho / settings.rho0, exponent) - 1.f); 

    //? Murnaghan equation of state ???

    //* Ideal gas equation
    // float pressure = settings.stiffness * (rho - settings.rho0); 
    
    p.p = max(pressure, 0.f);     //? required?
    p.V = settings.mass / rho;

    outStorage.particles[particleID] = p;
}

// volume = mass / density

// Todo: file:///C:/Users/andre/Downloads/pcisph%20(2).pdf try this

// Todo: https://cg.informatik.uni-freiburg.de/publications/2013_TVCG_IISPH.pdf try this

// Todo: https://www.politesi.polimi.it/bitstream/10589/33101/1/2011_12_Pirovano.pdf (try pressure corrected sph?)