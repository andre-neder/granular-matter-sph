#version 460

#extension GL_EXT_nonuniform_qualifier : require

#define UINT_MAX (0xffffffff)
#define FLOAT_MAX 3.402823466e+38
#define EPSILON 0.0000001f
#define PI      3.1415926f
#define BUFFER_A 0
#define BUFFER_B 1

layout (local_size_x_id = 1, local_size_y = 1, local_size_z = 1) in;

struct LRParticle{
    vec2 position;
    vec2 predPosition;
    vec2 velocity;
    vec2 externalForce;
    vec2 internalForce;
    float rho;
    float p;
    float V;
    float a;
    vec2 d;
    mat2 stress;
    vec2 dijpj;
    float dpi;
    float lastP;
    float densityAdv;
    float pad0;
    float pad1;
    float pad2;
};


layout(set = 0, binding = BUFFER_A) buffer StorageInput{
    LRParticle particles[];
} inStorage;

layout(set = 0, binding = BUFFER_B) buffer StorageOutput{
    LRParticle particles[];
} outStorage;

layout(set = 0, binding = 4) uniform sampler volumeMapSampler; 
layout(set = 0, binding = 5) uniform texture2D sdfTexture[]; 
 
layout( push_constant ) uniform Settings{
    vec2 g; 
    float r_LR;                 
    float h_LR; 

    float rho0; 
    float mass;
    float stiffness;	  
    float dt;	 

    float DOMAIN_WIDTH; 
    float DOMAIN_HEIGHT;  
    float sleepingSpeed;
    float h_HR;

    float theta;       
    float sigma;                           
    float alpha;                             
    uint n_HR;                              
    
    float pad2;                                
    float dragCoefficient;                
    float rhoAir;                             
    float pad3;
} settings;

struct ParticleGridEntry{
    uint particleIndex;
    uint cellKey;
};

layout(set = 1, binding = 0) buffer GridLookUpStorage{
    ParticleGridEntry entries[];
} gridLookup;

layout(set = 1, binding = 2) buffer StartringIndicesStorage{
    uint startingIndices[];
};


int MASKS[] = int[] (0x55555555, 0x33333333, 0x0F0F0F0F, 0x00FF00FF, 0x0000FFFF);

int xy2z(vec2 U) {       // --- grid location to curve index
    ivec2 I = ivec2(U);
    int n=8;
    for (int i=3; i>=0; i--)
        I =  (I | (I << n)) & MASKS[i],
        n /= 2;
    return I.x | (I.y << 1);
}

uint calculateCellKey(uvec2 cell){
    return (cell.x * 3079 + cell.y * 1543) % gridLookup.entries.length();
   // return xy2z(cell);
}

//* https://github.com/glslify/glsl-frobenius/blob/master/index.glsl
float frobenius(mat2 m) {
  return sqrt(dot(m[0],m[0]) + dot(m[1],m[1]));
}

float frobenius(mat3 m) {
  return sqrt(dot(m[0],m[0]) + dot(m[1],m[1]) + dot(m[2],m[2]));
}

float rand(){
    return fract(sin(dot(vec2(settings.dt * 25165843.f, settings.dt * 786433), vec2(12.9898, 78.233))) * 43758.5453);
}

float W(float r, float h){
    float volume = PI * pow(h, 4.f) / 6.f;
    return (h - r) * (h - r) / volume;
}
vec2 gradW(vec2 rij, float h){
    float r = length(rij);
    vec2 dir = r <= EPSILON ? vec2(rand(), rand()) : normalize(rij); 
    float scale = -12.f / (PI * pow(h, 4.f));
    float slope = scale * (r - h);
    return -dir * slope;
}

vec2 gradW(float r, vec2 rij, float h){
    vec2 dir = r <= EPSILON ? vec2(rand(), rand()) : normalize(rij); 
    float scale = -12.f / (PI * pow(h, 4.f));
    float slope = scale * (r - h);
    return -dir * slope;
}


#define for_all_fluid_neighbors(code) { \
    ivec2 particleCell = ivec2(floor(vec2(p.predPosition / settings.h_LR))); \
    for (int k = -1; k <= 1; k++){ \
        for (int l = -1; l <= 1; l++){ \
            ivec2 cell = ivec2(particleCell.x + k, particleCell.y + l); \
            uint cellKey = calculateCellKey(uvec2(cell)); \
            uint startIndex = startingIndices[cellKey]; \
            for(uint i = startIndex; i < gridLookup.entries.length(); i++) { \
                if(gridLookup.entries[i].cellKey != cellKey){ \
                    break; \
                } \
                uint particleIndex = gridLookup.entries[i].particleIndex; \
                LRParticle pi = inStorage.particles[particleIndex]; \
                vec2 p_pi = p.predPosition - pi.predPosition;\
                float r = length(p_pi); \
                code \
            } \
        }  \
    } \
}


struct VolumeMapTransform{
    vec2 position;
    vec2 scale;
};

layout(set = 0, binding = 3) buffer VolumeMapTransforms{
    VolumeMapTransform transform[];
} volumeMaps;

void main(){

    uint particleID = gl_GlobalInvocationID.x;;
    LRParticle p = inStorage.particles[particleID];

    p.lastP = p.p;
    
    outStorage.particles[particleID] = p;
}

