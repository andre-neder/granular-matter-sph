#version 460

#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_shader_atomic_float : enable

#define UINT_MAX (0xffffffff)
#define FLOAT_MAX 3.402823466e+38
#define EPSILON 0.0000001f
#define PI      3.1415926f

//* Types

struct LRParticle{
    vec4 position;
    vec4 velocity;
    vec4 externalForce;
    vec4 internalForce;
    vec4 d;
    vec4 dijpj;
    mat4 stress;

    float rho;
    float p;
    float V;
    float a;
    float dpi;
    float lastP;
    float densityAdv;
    float pad0;
};

struct ParticleGridEntry{
    uint particleIndex;
    uint cellKey;
};

struct VolumeMapTransform{
    vec4 position;
    vec4 scale;
};

//* Layout
layout (local_size_x_id = 1, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 1) buffer SSBO{
    LRParticle particles[];
} ssbo;

layout(set = 0, binding = 3) buffer AdditionalData{
    float averageDensityError;
    float pad[3];
} additionalData;

layout(set = 0, binding = 4) buffer VolumeMapTransforms{
    VolumeMapTransform transform[];
} volumeMaps;

layout(set = 0, binding = 5) uniform sampler volumeMapSampler; 
layout(set = 0, binding = 6) uniform texture3D sdfTexture[]; 
 
layout( push_constant ) uniform Settings{
    vec4 g; 

    float r_LR;         
    float h_LR; 
    float rho0; 
    float mass;

    float maxCompression;	
    float dt;	 
    float DOMAIN_WIDTH; 
    float DOMAIN_HEIGHT;  

    float sleepingSpeed;
    float h_HR;
    float theta;                               
    float rhoAir;                                 
    
    vec4 windDirection;      

    float dragCoefficient;                
    uint n_HR; 
    float scale_W;
    float scale_GradW;
    float A_LR; 
    float v_max;
    float pad0;
    float pad1; 
} settings;

layout(set = 1, binding = 0) buffer GridLookUpStorage{
    ParticleGridEntry entries[];
} gridLookup;

layout(set = 1, binding = 2) buffer StartringIndicesStorage{
    uint startingIndices[];
};

//* Functions

uint calculateCellKey(uvec3 cell){
    return (cell.x * 3079 + cell.y * 1543 + cell.z * 389) % gridLookup.entries.length();
}

float frobenius(mat3 m) {
  return sqrt(dot(m[0],m[0]) + dot(m[1],m[1]) + dot(m[2],m[2]));
}

float W(float r, float h){
    float v = h - r;
    return v * v * v * settings.scale_W;
}
vec3 gradW(vec3 r, float h){
    float rl = length(r);
    float v = h - rl;
    vec3 dir = rl <= EPSILON ? vec3(0) : normalize(r);
    return -v * v * settings.scale_GradW* dir;
}

float trace(mat3 m){
    return m[0][0] + m[1][1] + m[2][2];
}

//* Macros

#define for_all_fluid_neighbors(code) { \
    ivec3 particleCell = ivec3(floor(vec3(p.position.xyz / settings.h_LR))); \
    for (int k = -1; k <= 1; k++){ \
        for (int l = -1; l <= 1; l++){ \
            for (int m = -1; m <= 1; m++){ \
                ivec3 cell = ivec3(particleCell.x + k, particleCell.y + l, particleCell.z + m); \
                uint cellKey = calculateCellKey(uvec3(cell)); \
                uint startIndex = startingIndices[cellKey]; \
                for(uint i = startIndex; i < gridLookup.entries.length(); i++) { \
                    if(gridLookup.entries[i].cellKey != cellKey){ \
                        break; \
                    } \
                    uint particleIndex = gridLookup.entries[i].particleIndex; \
                    LRParticle pi = ssbo.particles[particleIndex]; \
                    vec3 p_pi = p.position.xyz - pi.position.xyz;\
                    float r = length(p_pi); \
                    if (r < settings.h_LR){\
                        code \
                    }\
                } \
            }  \
        }  \
    } \
}

#define for_all_volume_maps(code) { \
    for (int i = 0; i < volumeMaps.transform.length(); i++){ \
        vec3 samplePosition = (p.position.xyz - volumeMaps.transform[i].position.xyz) / volumeMaps.transform[i].scale.xyz; \
        vec4 vM = texture(sampler3D(sdfTexture[i], volumeMapSampler), samplePosition); \
        vec3 p_pi = vM.rgb; \
        float volume = vM.a; \
        float r = length(p_pi); \
        if(r < settings.h_LR){ \
            code \
        }\
    }\
}

void main(){


    uint particleID = gl_GlobalInvocationID.x;;
    LRParticle p = ssbo.particles[particleID];

    //* Strain & Stress 
    mat3 deformationGradient = mat3(0.f);
    mat3 D = mat3(0.f);

    for_all_fluid_neighbors(
        if(particleIndex == particleID){
            continue;
        }

        //* Strain & Stress 
        vec3 gradient = gradW(p_pi, settings.h_LR);
        deformationGradient += pi.V * outerProduct(gradient, p.velocity.xyz - pi.velocity.xyz);
        D += (1.f / (pi.rho)) * outerProduct(gradient, gradient);
    
    )

    for_all_volume_maps(
        vec3 gradient = gradW(p_pi, settings.h_LR);
        deformationGradient += volume * outerProduct(gradient, p.velocity.xyz - vec3(0));
        D += (1.f / settings.rho0) * outerProduct(gradient, gradient);
    )

    //* https://dl.acm.org/doi/pdf/10.1145/2019406.2019410
    //? http://gamma.cs.unc.edu/granular/narain-2010-granular.pdf
    float pRhoSq = (p.rho ) * (p.rho );
    D *= (2.f * settings.mass * settings.mass * settings.dt) / pRhoSq;

    mat3 strainTensor = 0.5f * (deformationGradient + transpose(deformationGradient));

    mat3 stressTensor = inverse(D) * strainTensor;

    // Piola-Kirchhoff stress tensor
    // float lambda = 1.0;
    // float mu = 1.0;
    // float G = 44;//mu;
    // float K = 38;//lambda + 2 * mu / 3;
    // mat3 P = 2 * G * strainTensor + (K - 2.0/3.0 * G) * trace(strainTensor) * mat3(1.0);

    mat3 meanHydrostaticStressTensor = 0.5f * trace(stressTensor) * mat3(1.f);
    mat3 deviatoricStressTensor = stressTensor - meanHydrostaticStressTensor;
    mat3 stress = mat3(0);
    
    float alpha = sqrt(2.f / 3.f) * sin(settings.theta); //* frictional coefficient
    float yield = sqrt(3.f) * alpha * p.p; //* Drucker-Prager yield criterion



    float normDeviatoricStressTensor = frobenius(deviatoricStressTensor);
    if(p.p > EPSILON && normDeviatoricStressTensor > EPSILON){
        stress = normDeviatoricStressTensor <= yield ? deviatoricStressTensor : deviatoricStressTensor * (yield / normDeviatoricStressTensor);
    }

    p.stress = mat4(stress);
    
    // float maxCohesion = _beta * _beta * _C;
    // mat3 cohesion = mat3(0);
    // float normStressTensor = frobenius(stressTensor);
    // if(p.p > EPSILON && normStressTensor > EPSILON){
    //     cohesion = normStressTensor <= maxCohesion ? stressTensor : stressTensor * (maxCohesion / normStressTensor);
    // }
    // p.pad0 = normStressTensor;
    // p.stress = frobenius(stress) > frobenius(cohesion) ? stress : cohesion;

    ssbo.particles[particleID] = p;
}
