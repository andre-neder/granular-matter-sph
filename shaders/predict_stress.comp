#version 460
#define VULKAN 100
#define EPSILON 0.0000001f
#define PI      3.1415926f
#define BUFFER_A 0
#define BUFFER_B 1

#extension GL_EXT_nonuniform_qualifier : require
layout (local_size_x_id = 1, local_size_y = 1, local_size_z = 1) in;

struct LRParticle{
    vec2 position;
    vec2 predPosition;
    vec2 velocity;
    vec2 externalForce;
    vec2 internalForce;
    float rho;
    float p;
    float V;
    float boundaryVolume;
    vec2 boundaryNormal;
    mat2 stress;
};


layout(set = 0, binding = BUFFER_A) buffer StorageInput{
    LRParticle particles[];
} inStorage;

layout(set = 0, binding = BUFFER_B) buffer StorageOutput{
    LRParticle particles[];
} outStorage;

layout( push_constant ) uniform Settings{
    vec2 g; 
    float r_LR;                 
    float h_LR; 

    float rho0; 
    float mass;
    float stiffness;	  
    float dt;	 

    float DOMAIN_WIDTH; 
    float DOMAIN_HEIGHT;  
    float sleepingSpeed;
    float h_HR;

    float theta;       
    float sigma;                           
    float alpha;                             
    uint n_HR;                              
    
    float pad2;                                
    float dragCoefficient;                
    float rhoAir;                             
    float pad3;
} settings;

struct ParticleGridEntry{
    uint particleIndex;
    uint cellKey;
};

layout(set = 1, binding = 0) buffer GridLookUpStorage{
    ParticleGridEntry entries[];
} gridLookup;

layout(set = 1, binding = 2) buffer StartringIndicesStorage{
    uint startingIndices[];
};

uint calculateCellKey(uvec2 cell){
    return (cell.x * 3079 + cell.y * 1543) % gridLookup.entries.length();
}

//* https://github.com/glslify/glsl-frobenius/blob/master/index.glsl
float frobenius(mat2 m) {
  return sqrt(dot(m[0],m[0]) + dot(m[1],m[1]));
}

float frobenius(mat3 m) {
  return sqrt(dot(m[0],m[0]) + dot(m[1],m[1]) + dot(m[2],m[2]));
}

float rand(){
    return fract(sin(dot(vec2(settings.dt * 25165843.f, settings.dt * 786433), vec2(12.9898, 78.233))) * 43758.5453);
}

float W(float r, float h){
    float volume = PI * pow(h, 4.f) / 6.f;
    return (h - r) * (h - r) / volume;
}
vec2 gradW(vec2 rij, float h){
    float r = length(rij);
    vec2 dir = r <= EPSILON ? vec2(rand(), rand()) : normalize(rij); 
    float scale = -12.f / (PI * pow(h, 4.f));
    float slope = scale * (r - h);
    return -dir * slope;
}

vec2 gradW(float r, vec2 rij, float h){
    vec2 dir = r <= EPSILON ? vec2(rand(), rand()) : normalize(rij); 
    float scale = -12.f / (PI * pow(h, 4.f));
    float slope = scale * (r - h);
    return -dir * slope;
}
vec2 adjustKernelRadiusOffset(vec2 position){
    return vec2(position.x - 2 * settings.h_LR, position.y - 2 * settings.h_LR);
}
vec2 adjustKernelRadiusScale(vec2 scale){
    return vec2(scale + 4 * settings.h_LR);
}
layout(set = 0, binding = 3) uniform sampler volumeMapSampler; 
layout(set = 0, binding = 4) uniform texture2D sdfTexture[]; 


#define for_all_fluid_neighbors(code) { \
    ivec2 particleCell = ivec2(floor(vec2(p.predPosition / settings.h_LR))); \
    for (int k = -1; k <= 1; k++){ \
        for (int l = -1; l <= 1; l++){ \
            ivec2 cell = ivec2(particleCell.x + k, particleCell.y + l); \
            uint cellKey = calculateCellKey(uvec2(cell)); \
            uint startIndex = startingIndices[cellKey]; \
            for(uint i = startIndex; i < gridLookup.entries.length(); i++) { \
                if(gridLookup.entries[i].cellKey != cellKey){ \
                    break; \
                } \
                uint particleIndex = gridLookup.entries[i].particleIndex; \
                LRParticle pi = inStorage.particles[particleIndex]; \
                vec2 p_pi = p.predPosition - pi.predPosition;\
                float r = length(p_pi); \
                code \
            } \
        }  \
    } \
}

void main(){
    uint particleID = gl_GlobalInvocationID.x;;
    LRParticle p = inStorage.particles[particleID];

    //* Strain & Stress 
    mat2 velocityGradient = mat2(0.f);
    mat2 D = mat2(0.f);

    for_all_fluid_neighbors(
        if(particleIndex == particleID){
            continue;
        }
        if (r < settings.h_LR)
        {
            //* Strain & Stress 
            vec2 gradient = gradW(p_pi, settings.h_LR);
            velocityGradient += pi.V * outerProduct(gradient, p.velocity - pi.velocity);
            D += (1.f / pi.rho) * outerProduct(gradient, gradient);
        }
    )


    float halfBoxSize = settings.DOMAIN_HEIGHT / 4;
    vec2 rigidBodyPositions[] = {
        vec2( 0, 0), // Bottom
        vec2( 0, 0), // Left
        vec2( settings.DOMAIN_WIDTH, 0), // Right
        // vec2( settings.DOMAIN_WIDTH / 2.0 - halfBoxSize, 0),
    };
    vec2 rigidBodyScale[] = {
        vec2(1), vec2(1), vec2(1), 
        // vec2(halfBoxSize * 2),
    };

    for (int i = 0; i < rigidBodyPositions.length(); i++){
        vec2 samplePosition = (p.predPosition - adjustKernelRadiusOffset(rigidBodyPositions[i])) / adjustKernelRadiusScale(rigidBodyScale[i]);
        vec2 p_pi = texture(sampler2D(sdfTexture[i], volumeMapSampler), samplePosition).gb;
        float r = length(p_pi);
        if(r < settings.h_LR){
            float volume = texture(sampler2D(sdfTexture[i], volumeMapSampler), samplePosition).r;
            vec2 gradient = gradW(p_pi, settings.h_LR);
            velocityGradient += volume * outerProduct(gradient, p.velocity - vec2(0,0));
            D += (1.f / settings.rho0) * outerProduct(gradient, gradient);
        }
    }

    //* https://dl.acm.org/doi/pdf/10.1145/2019406.2019410
    //? http://gamma.cs.unc.edu/granular/narain-2010-granular.pdf
    D *= (2.f * settings.mass * settings.mass * settings.dt) / (p.rho * p.rho);
    mat2 strainTensor = 0.5f * (velocityGradient + transpose(velocityGradient));
    mat2 stressTensor = inverse(D) * strainTensor;
    mat2 meanHydrostaticStressTensor = 0.5f * (stressTensor[0][0] + stressTensor[1][1]) * mat2(1.f);
    mat2 deviatoricStressTensor = stressTensor - meanHydrostaticStressTensor;
    
    float alpha = sqrt(2.f / 3.f) * sin(settings.theta); //* frictional coefficient
    float yield = sqrt(3.f) * alpha * p.p; //* Drucker-Prager yield criterion

    mat2 stress = mat2(0);
    mat2 cohesion = mat2(0);

    float normDeviatoricStressTensor = frobenius(deviatoricStressTensor);
    if(p.p > EPSILON && normDeviatoricStressTensor > EPSILON){
        stress = normDeviatoricStressTensor <= yield ? deviatoricStressTensor : deviatoricStressTensor * (yield / normDeviatoricStressTensor);
    }

    p.stress = stress;
    
    // float maxCohesion = _beta * _beta * _C;
    // float normStressTensor = frobenius(stressTensor);
    // if(p.p > EPSILON && normStressTensor > EPSILON){
    //     cohesion = normStressTensor <= maxCohesion ? stressTensor : stressTensor * (maxCohesion / normStressTensor);
    // }
    // p.pad0 = normStressTensor;
    // p.stress = frobenius(stress) > frobenius(cohesion) ? stress : cohesion;

    outStorage.particles[particleID] = p;
}
