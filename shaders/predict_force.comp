#version 450
#define VULKAN 100
#define EPSILON 0.0000001f
#define PI      3.1415926f

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

struct Particle{
  vec2 position;
  vec2 predPosition;
  vec2 velocity;
  vec2 predVelocity;
  vec2 pressureAcceleration;
  float rho;
  float p;
  float V;
  float psi_p0; 
  float stress; 
  float pad2; 
};

struct BoundaryParticle{
  vec2 position;
  vec2 normal;
  vec2 velocity;
  vec2 predVelocity;
  vec2 force;
  float rho;
  float p;
  float V;
  float psi_p0; 
  float pad1; 
  float pad2; 
};

layout(set = 0, binding = 1) buffer StorageInput{
    Particle particles[];
} inStorage;

layout(set = 0, binding = 0) buffer StorageOutput{
    Particle particles[];
} outStorage;

layout(set = 0, binding = 3) buffer BoundaryStorage{
    BoundaryParticle particles[];
} boundary;

layout(set = 0, binding = 2) uniform Settings{
  vec2 G;       
  float rhoRest;
  float kernelRadius;		   

  float mass;		 
  float stiffness;
  float dt;	  
  float DOMAIN_WIDTH;

  float DOMAIN_HEIGHT;
  float pad0, pad1, pad2;

} settings;

uint particleID = gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * gl_NumWorkGroups.x;

Particle readCurrentParticle(){
    return inStorage.particles[particleID];
}
void writeCurrentParticle(in Particle p){
    outStorage.particles[particleID] = p;
}

// https://github.com/InteractiveComputerGraphics/SPlisHSPlasH/blob/master/SPlisHSPlasH/SPHKernels.h
float W(float rij, float h){
    // float res = 0.f;
    // float q = rij / h;
    // float h3 = h * h * h;
    // float k = 8.f / (PI * h3);
    // if(q <= 1.f){
    //     if(q <= 0.5f){
    //         float q2 = q * q;
    //         float q3 = q2 * q;
    //         res = k * (6.f * q3 - 6.f * q2 + 1.f);
    //     }
    //     else{
    //         res = k * (2.f * pow(1.f - q, 3.f));
    //     }
    // }
    // return res;
    float volume = PI * pow(h, 4.f) / 6.f;
    return (h - rij) * (h - rij) / volume;
}

float rand(){
    return fract(sin(dot(vec2(settings.dt * 25165843.f, settings.dt * 786433), vec2(12.9898, 78.233))) * 43758.5453);
}

vec2 gradW(vec2 rij, float h){
    // vec2 res = vec2(0.f);
    // float rl = length(rij);
    // float q = rl / h;
    // float h3 = h * h * h;
    // float l = 48.f / (PI * h3);
    // if(rl > EPSILON && q <= 1.f){
    //     vec2 gradq = rij / rl;
    //     gradq /= h;
    //     if(q < 0.5f){
    //         res = l * (q * (3.f * q - 2.f) * gradq);
    //     }
    //     else{
    //         float factor = 1.f - q;
    //         res = l * (-factor * factor) * gradq;
    //     }
    // }
    // return res;
    float r = length(rij);
    vec2 dir = r <= EPSILON ? vec2(rand(), rand()) : normalize(rij); 
    float scale = -12.f / (PI * pow(h, 4.f));
    float slope = scale * (r - h);
    return dir * slope;
}

vec2 gradW(float r, vec2 rij, float h){
    // vec2 res = vec2(0.f);
    // float rl = length(rij);
    // float q = rl / h;
    // float h3 = h * h * h;
    // float l = 48.f / (PI * h3);
    // if(rl > EPSILON && q <= 1.f){
    //     vec2 gradq = rij / rl;
    //     gradq /= h;
    //     if(q < 0.5f){
    //         res = l * (q * (3.f * q - 2.f) * gradq);
    //     }
    //     else{
    //         float factor = 1.f - q;
    //         res = l * (-factor * factor) * gradq;
    //     }
    // }
    // return res;
    // float r = length(rij);
    vec2 dir = r <= EPSILON ? vec2(rand(), rand()) : normalize(rij); 
    float scale = -12.f / (PI * pow(h, 4.f));
    float slope = scale * (r - h);
    return dir * slope;
}

void main(){
    Particle p = readCurrentParticle();
    //* Init pressure pressureAcceleration
    vec2 pressureAcceleration = vec2(0.f);
    vec2 frictionalAcceleration = vec2(0.f);
    float pRhoSq = p.rho * p.rho;

    //* Sum up pressure forces and strain
    for (int i = 0; i < inStorage.particles.length();i++)
    {
        Particle pi = inStorage.particles[i];
        
        if (i == particleID){
            continue;
        }

        vec2 p_pi = p.predPosition - pi.predPosition;
        float r = length(p_pi);
        
        if (r < settings.kernelRadius)
        {
            //* Pressure calculation
            float piRhoSq = pi.rho * pi.rho;
            vec2 gradient = gradW(p_pi, settings.kernelRadius);
            pressureAcceleration += (p.p / pRhoSq + pi.p / piRhoSq) * gradient;
            frictionalAcceleration += (p.stress / pRhoSq + pi.stress / piRhoSq) * gradient;
            
        }
    }
    
    //* For all boundary particles
    for (int i = 0; i < boundary.particles.length();i++)
    {
        BoundaryParticle pb = boundary.particles[i];
       
        vec2 p_pb = p.predPosition - pb.position;
        float r = length(p_pb);
        
        if (r < settings.kernelRadius)
        {
            //* https://cg.informatik.uni-freiburg.de/publications/2012_VRIPHYS_hiResGranularSPH.pdf
            //* using normal instead of direction to boundary
            vec2 gradient = gradW(r, pb.normal, settings.kernelRadius);
            pressureAcceleration += pb.psi_p0 * (p.p / pRhoSq) * gradient; 
            frictionalAcceleration += pb.psi_p0 * (p.stress / pRhoSq) * gradient; 
        }
    }

    // pressureAcceleration *= settings.mass; //! muss might be required later when having multiple materials
   
    p.pressureAcceleration = pressureAcceleration + frictionalAcceleration;

    writeCurrentParticle(p);
}
