#version 450
#define UINT_MAX (0xffffffff)
#define EPSILON 0.0000001f
#define PI      3.1415926f
#define BUFFER_A 0
#define BUFFER_B 1

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

struct Particle{
    vec2 position;
    vec2 predPosition;
    vec2 velocity;
    vec2 predVelocity;
    vec2 pressureAcceleration;
    float rho;
    float p;
    float V;
    float psi_rho0; 
    float pad0, pad1;
    mat2 stress;
};

struct BoundaryParticle{
    vec2 position;
    vec2 normal;
    vec2 velocity;
    vec2 predVelocity;
    vec2 pressureAcceleration;
    float rho;
    float p;
    float V;
    float psi_rho0; 
    float pad0, pad1;
    mat2 stress;
};

layout(set = 0, binding = BUFFER_B) buffer StorageInput{
    Particle particles[];
} inStorage;

layout(set = 0, binding = BUFFER_A) buffer StorageOutput{
    Particle particles[];
} outStorage;

layout(set = 0, binding = 3) buffer BoundaryStorage{
    BoundaryParticle particles[];
} boundary;

layout(set = 0, binding = 2) uniform Settings{
  vec2 G;       
  float rho0;
  float kernelRadius;		   

  float mass;		 
  float stiffness;
  float dt;	  
  float DOMAIN_WIDTH;

  float DOMAIN_HEIGHT;
  float theta;
  float sigma;
  float beta;

  float C;
  float alpha;
  float pad1;
  float pad2;
} settings;

struct ParticleGridEntry{
    uint particleIndex;
    uint cellKey;
};

layout(set = 1, binding = 0) buffer GridLookUpStorage{
    ParticleGridEntry entries[];
} gridLookup;

layout(set = 1, binding = 2) buffer StartringIndicesStorage{
    uint startingIndices[];
};

//* https://github.com/glslify/glsl-frobenius/blob/master/index.glsl
float frobenius(mat2 m) {
  return sqrt(dot(m[0],m[0]) + dot(m[1],m[1]));
}

float frobenius(mat3 m) {
  return sqrt(dot(m[0],m[0]) + dot(m[1],m[1]) + dot(m[2],m[2]));
}

float rand(){
    return fract(sin(dot(vec2(settings.dt * 25165843.f, settings.dt * 786433), vec2(12.9898, 78.233))) * 43758.5453);
}

float W(float r, float h){
    float volume = PI * pow(h, 4.f) / 6.f;
    return (h - r) * (h - r) / volume;
    // float alpha = 15.f / (14.f * PI * h * h);
    // float q = r / h;
    // if(r < EPSILON){
    //     return 0;
    // }
    // if (q >= 0.0 && q < 1.0) {
    //     return alpha * (1.f - 1.5f * q * q + 0.75f * q * q * q);
    // } else if (q >= 1.f && q < 2.f) {
    //     float beta = (2.f - q);
    //     return alpha * 0.25f * beta * beta * beta;
    // } else {
    //     return 0.f;
    // }
}
vec2 gradW(vec2 rij, float h){
    float r = length(rij);
    vec2 dir = r <= EPSILON ? vec2(rand(), rand()) : normalize(rij); 
    float scale = -12.f / (PI * pow(h, 4.f));
    float slope = scale * (r - h);
    return -dir * slope;
    // float alpha = 15.f / (14.f * PI * h * h);
    // float r = length(rij);
    // float q = r / h;
    // if(r < EPSILON){
    //     return vec2(0.0);
    // }
    // if (q >= 0.0 && q < 1.0) {
    //     float coeff = alpha * (-3.0 * q + 2.25 * q * q);
    //     return coeff * normalize(rij);
    // } else if (q >= 1.0 && q < 2.0) {
    //     float beta = (2.f - q);
    //     float coeff = -0.75 * alpha * beta * beta;
    //     return coeff * normalize(rij);
    // } else {
    //     return vec2(0.0);
    // }
}

vec2 gradW(float r, vec2 rij, float h){
    vec2 dir = r <= EPSILON ? vec2(rand(), rand()) : normalize(rij); 
    float scale = -12.f / (PI * pow(h, 4.f));
    float slope = scale * (r - h);
    return -dir * slope;
    // float alpha = 15.f / (14.f * PI * h * h);
    // float q = r / h;
    // if(r < EPSILON){
    //     return vec2(0.0);
    // }
    // if (q >= 0.0 && q < 1.0) {
    //     float coeff = alpha * (-3.0 * q + 2.25 * q * q);
    //     return coeff * normalize(rij);
    // } else if (q >= 1.0 && q < 2.0) {
    //     float beta = (2.f - q);
    //     float coeff = -0.75 * alpha * beta * beta;
    //     return coeff * normalize(rij);
    // } else {
    //     return vec2(0.0);
    // }
}

uint calculateCellKey(uvec2 cell){
    return (cell.x * 3079 + cell.y * 1543) % gridLookup.entries.length();
}

void main(){
    uint particleID = gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * gl_NumWorkGroups.x;
    Particle p_in = inStorage.particles[particleID];
    Particle p_out = p_in;
    //* Density
    float rho = 0.f;

    //* For all fluid particles
    for (int i = 0; i< inStorage.particles.length();i++)
    {
        Particle pi = inStorage.particles[i];
        vec2 p_pi = p_in.predPosition - pi.predPosition;
        float r = length(p_pi);
       
        if (r < settings.kernelRadius)
        {
            //* Density
            rho += W(r, settings.kernelRadius);
        }
    }
    rho *= settings.mass;

    // uvec2 particleCell = uvec2(uint(p_in.predPosition.x / settings.kernelRadius), uint(p_in.predPosition.y / settings.kernelRadius));

    // for (int k = -1; k <= 1; k++){
    //     for (int l = -1; l <= 1; l++){
    //         // current cell coordinate
    //         uvec2 cell = uvec2(particleCell.x + k, particleCell.y + l);
    //         if(cell.x == UINT_MAX || cell.y == UINT_MAX || cell.x > (settings.DOMAIN_WIDTH / settings.kernelRadius) || cell.y >= (settings.DOMAIN_HEIGHT / settings.kernelRadius)){
    //             continue;
    //         }
    //         // current cell key
    //         uint cellKey = calculateCellKey(cell);
            
    //         // index of current entry for cell
    //         uint startIndex = startingIndices[cellKey];

    //         if(startIndex == UINT_MAX){
    //             continue;
    //         }
    //         // While particle is in the same cell
    //         for(uint i = startIndex; i < gridLookup.entries.length(); i++)
    //         {
    //             if(gridLookup.entries[i].cellKey != cellKey){
    //                 break;
    //             }
    //             // index of particle of current index
    //             uint particleIndex = gridLookup.entries[i].particleIndex;
    //             Particle pi = inStorage.particles[particleIndex];

    //             vec2 p_pi = p_in.predPosition - pi.predPosition;
    //             float r = length(p_pi);
            
    //             if (r < settings.kernelRadius)
    //             {
    //                 //* Density
    //                 rho += W(r, settings.kernelRadius);
    //             }
    //         }
    //     } 
    // }

    // rho *= settings.mass;

  
    //* For all boundary particles
    for (int i = 0; i < boundary.particles.length();i++)
    {
        BoundaryParticle pb = boundary.particles[i];
        vec2 p_pb = p_in.predPosition - pb.position;
        float r = length(p_pb);
       
        if (r < settings.kernelRadius)
        {
            //* Density
            rho += pb.psi_rho0 * W(r, settings.kernelRadius);
        }
    }
    
    p_out.rho = rho;

    //* tait's equation
    // p.rho = max(p.rho, settings.rho0); 
    // float exponent = 7.f;
    // float B = settings.stiffness;// (settings.rho0 * c * c) / exponent;
    // p.p = B * (pow(max(p.rho, settings.rho0) / settings.rho0, exponent) - 1.f); 

    //* Ideal gas equation
    float p = settings.stiffness * (rho - settings.rho0); 
    
    p_out.p = max(p, 0.f);     //? required?
    p_out.V = settings.mass / rho;

    outStorage.particles[particleID] = p_out;
}

// volume = mass / density