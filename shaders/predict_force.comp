#version 450
#define VULKAN 100
#define EPSILON 0.0000001f
#define PI      3.1415926f

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

struct Particle{
  vec2 position;
  vec2 predPosition;
  vec2 velocity;
  vec2 predVelocity;
  vec2 pressureAcceleration;
  float rho;
  float p;
  float V;
  float psi_b; 
  float pad1; 
  float pad2; 
};

layout(set = 0, binding = 1) buffer StorageInput{
    Particle particles[];
} inStorage;

layout(set = 0, binding = 0) buffer StorageOutput{
    Particle particles[];
} outStorage;

layout(set = 0, binding = 3) buffer BoundaryStorage{
    Particle particles[];
} boundary;

layout(set = 0, binding = 2) uniform SPHSettings{
  vec2 G;                 // external (gravitational) forces
  float padPI;
  float rhoRest;  // rest density
  // 4
  float GAS_CONST; // const for equation of state
  float kernelRadius;		   // kernel radius
  float volume;		   // radius^2 for optimization
  float MASS;		   // assume all particles have the same mass
  // 8
  float VISC;	   // viscosity constant //! unused
  float dt;	   // integration timestep

  // smoothing kernels defined in MÃ¼ller and their gradients
  // adapted to 2D per "SPH Based Shallow Water Simulation" by Solenthaler et al.
  float POLY6; //! unused
  float SPIKY_GRAD; //! unused
  // 12
  float VISC_LAP; //! unused

  // simulation parameters
  float BOUNDARY_EPSILON; // boundary epsilon
  float BOUNDARY_DAMPING;
  float DOMAIN_WIDTH;
  // 16
  float DOMAIN_HEIGHT;

  float pad0, pad1, pad2;
  // 20
} sphSettings;

uint particleID = gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * gl_NumWorkGroups.x;

Particle readCurrentParticle(){
    return inStorage.particles[particleID];
}
void writeCurrentParticle(in Particle p){
    outStorage.particles[particleID] = p;
}

// https://github.com/InteractiveComputerGraphics/SPlisHSPlasH/blob/master/SPlisHSPlasH/SPHKernels.h
float W(float rij, float h){
    // float res = 0.f;
    // float q = rij / h;
    // float h3 = h * h * h;
    // float k = 8.f / (PI * h3);
    // if(q <= 1.f){
    //     if(q <= 0.5f){
    //         float q2 = q * q;
    //         float q3 = q2 * q;
    //         res = k * (6.f * q3 - 6.f * q2 + 1.f);
    //     }
    //     else{
    //         res = k * (2.f * pow(1.f - q, 3.f));
    //     }
    // }
    // return res;
    float volume = PI * pow(h, 4.f) / 6.f;
    return (h - rij) * (h - rij) / volume;
}

vec2 gradW(vec2 rij, float h){
    // vec2 res = vec2(0.f);
    // float rl = length(rij);
    // float q = rl / h;
    // float h3 = h * h * h;
    // float l = 48.f / (PI * h3);
    // if(rl > EPSILON && q <= 1.f){
    //     vec2 gradq = rij / rl;
    //     gradq /= h;
    //     if(q < 0.5f){
    //         res = l * (q * (3.f * q - 2.f) * gradq);
    //     }
    //     else{
    //         float factor = 1.f - q;
    //         res = l * (-factor * factor) * gradq;
    //     }
    // }
    // return res;
    float r = length(rij);
    vec2 dir = r <= EPSILON ? vec2(0) : normalize(rij);
    float scale = -12.f / (PI * pow(h, 4.f));
    float slope = scale * (r - h);
    return dir * slope;
}

void main(){
    Particle p = readCurrentParticle();
    //* Init pressure pressureAcceleration
    p.pressureAcceleration = vec2(0.f);
    // float pRhoSq = p.rho * p.rho;
    // float rhoRestSq = sphSettings.rhoRest * sphSettings.rhoRest;

    // vec2 sumGradNeighbor = vec2(0.f);
    //* Sum up pressure forces and strain
    for (int i = 0; i < inStorage.particles.length();i++)
    {
        Particle pi = inStorage.particles[i];
        
        if (i == particleID){
            continue;
        }

        vec2 p_pi = p.predPosition - pi.predPosition;
        float r = length(p_pi);
        
        if (r < sphSettings.kernelRadius)
        {
            // float piRhoSq = pi.rho * pi.rho;
            // (p.p / pRhoSq + pi.p / piRhoSq)
            p.pressureAcceleration += ((p.p + pi.p) / 2.f) * gradW(p_pi, sphSettings.kernelRadius) * -sphSettings.MASS / pi.rho;
        }
    }
    // pressureAcceleration *= -sphSettings.MASS;
    p.pressureAcceleration /= p.rho;
    // vec2 sumGradBoundary = vec2(0.f);
    // vec2 boundarypressureAcceleration = vec2(0.f);
    //* For all boundary particles
    // for (int i = 0; i < boundary.particles.length();i++)
    // {
    //     Particle pb = boundary.particles[i];
       
    //     vec2 p_pb = p.predPosition - pb.position;
    //     float r = length(p_pb);
        
    //     if (r < sphSettings.kernelRadius)
    //     {
    //         vec2 gradient = gradW(p_pb, sphSettings.kernelRadius);
    //         // sumGradBoundary += gradient;
    //         // boundarypressureAcceleration += (p.p / pRhoSq + p.p / (sphSettings.rhoRest * sphSettings.rhoRest)) * gradient;
    //         // boundarypressureAcceleration += (sphSettings.rhoRest / pb.V) * (p.p / pRhoSq + p.p / rhoRestSq) * gradient;
    //         boundarypressureAcceleration += p.psi_b * (p.p / pRhoSq) * gradient;
    //         // boundarypressureAcceleration += gradient;
    //     }
    // }
    // boundarypressureAcceleration *= -sphSettings.MASS;
    // boundarypressureAcceleration *= -p.p * (2.f * sphSettings.MASS / pRhoSq);

    // vec2 gamma2 = vec2(1.f);// -((sumGradNeighbor * sumGradBoundary) / (sumGradBoundary * sumGradBoundary));

    writeCurrentParticle(p);
}
