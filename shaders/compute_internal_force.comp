#version 460

#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_shader_atomic_float : enable

#define UINT_MAX (0xffffffff)
#define FLOAT_MAX 3.402823466e+38
#define EPSILON 0.0000001f
#define PI      3.1415926f

//* Types

struct LRParticle{
    vec4 position;
    vec4 velocity;
    vec4 externalForce;
    vec4 internalForce;
    vec4 d;
    vec4 dijpj;
    mat4 stress;
    mat4 deviatoricStress;

    float rho;
    float p;
    float V;
    float a;
    float dpi;
    float lastP;
    float densityAdv;
    float pad0;
};

struct ParticleGridEntry{
    uint particleIndex;
    uint cellKey;
};

struct VolumeMapTransform{
    vec4 position;
    vec4 scale;
};

//* Layout
layout (local_size_x_id = 1, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 1) buffer SSBO{
    LRParticle particles[];
} ssbo;

layout(set = 0, binding = 3) buffer AdditionalData{
    float averageDensityError;
    float pad[3];
} additionalData;

layout(set = 0, binding = 4) buffer VolumeMapTransforms{
    VolumeMapTransform transform[];
} volumeMaps;

layout(set = 0, binding = 5) uniform sampler volumeMapSampler; 
layout(set = 0, binding = 6) uniform texture3D sdfTexture[]; 
 
layout( push_constant ) uniform Settings{
    vec4 g; 

    float r_LR;         
    float h_LR; 
    float rho0; 
    float mass;

    float maxCompression;	
    float dt;	 
    float DOMAIN_WIDTH; 
    float DOMAIN_HEIGHT;  

    float sleepingSpeed;
    float h_HR;
    float theta;                               
    float rhoAir;                                 
    
    vec4 windDirection;      

    float dragCoefficient;                
    uint n_HR; 
    float scale_W;
    float scale_GradW;
    float A_LR; 
    float v_max;
    float pad0;
    float pad1; 
} settings;

layout(set = 1, binding = 0) buffer GridLookUpStorage{
    ParticleGridEntry entries[];
} gridLookup;

layout(set = 1, binding = 2) buffer StartringIndicesStorage{
    uint startingIndices[];
};

//* Functions

uint calculateCellKey(uvec3 cell){
    return (cell.x * 3079 + cell.y * 1543 + cell.z * 389) % gridLookup.entries.length();
}

float frobenius(mat3 m) {
  return sqrt(dot(m[0],m[0]) + dot(m[1],m[1]) + dot(m[2],m[2]));
}

float W(float r, float h){
    float v = h - r;
    return v * v * v * settings.scale_W;
}
vec3 gradW(vec3 r, float h){
    float rl = length(r);
    float v = h - rl;
    vec3 dir = rl <= EPSILON ? vec3(0) : normalize(r);
    return -v * v * settings.scale_GradW* dir;
}

//* Macros

#define for_all_fluid_neighbors(code) { \
    ivec3 particleCell = ivec3(floor(vec3(p.position.xyz / settings.h_LR))); \
    for (int k = -1; k <= 1; k++){ \
        for (int l = -1; l <= 1; l++){ \
            for (int m = -1; m <= 1; m++){ \
                ivec3 cell = ivec3(particleCell.x + k, particleCell.y + l, particleCell.z + m); \
                uint cellKey = calculateCellKey(uvec3(cell)); \
                uint startIndex = startingIndices[cellKey]; \
                for(uint i = startIndex; i < gridLookup.entries.length(); i++) { \
                    if(gridLookup.entries[i].cellKey != cellKey){ \
                        break; \
                    } \
                    uint particleIndex = gridLookup.entries[i].particleIndex; \
                    LRParticle pi = ssbo.particles[particleIndex]; \
                    vec3 p_pi = p.position.xyz - pi.position.xyz;\
                    float r = length(p_pi); \
                    if (r < settings.h_LR){\
                        code \
                    }\
                } \
            }  \
        }  \
    } \
}

#define for_all_volume_maps(code) { \
    for (int i = 0; i < volumeMaps.transform.length(); i++){ \
        vec3 samplePosition = ((p.position.xyz - volumeMaps.transform[i].position.xyz)  * volumeMaps.transform[i].scale.xyz) + 0.5; \
        vec4 vM = texture(sampler3D(sdfTexture[i], volumeMapSampler), samplePosition); \
        vec3 p_pi = vM.rgb; \
        float volume = vM.a; \
        float r = length(p_pi); \
        if(r < settings.h_LR){ \
            code \
        }\
    }\
}

void main(){
    uint particleID = gl_GlobalInvocationID.x;;
    LRParticle p = ssbo.particles[particleID];
    //* Init pressure internalForce
    vec3 internalForce = vec3(0.f);

   
    float pRhoSq = p.rho * p.rho;

    for_all_fluid_neighbors(
        if(particleIndex == particleID){
            continue;
        }
       
        //* Pressure calculation
        float piRhoSq =  pi.rho *  pi.rho;
        vec3 gradient = gradW(p_pi, settings.h_LR);
        
        internalForce += settings.mass * ((p.p / pRhoSq) + (pi.p / piRhoSq)) * gradient;
        
        internalForce += (settings.mass * ((p.stress / pRhoSq) + (pi.stress / piRhoSq)) * vec4(gradient,0.0)).xyz;
        
    )

    for_all_volume_maps(
        vec3 gradient = gradW(p_pi, settings.h_LR);
        vec3 n = normalize(p_pi);
        vec3 v = p.velocity.xyz - vec3(0.0);
        vec3 v_t = v - dot(v, n) * n;
        
        internalForce += (volume * settings.rho0) * (p.p / pRhoSq) * gradient; 
        
        vec3 F_f = ((volume * settings.rho0) * (p.stress / pRhoSq) * vec4(gradient, 0.0)).xyz;
        

        // float sigma = 8.0; // settings.pad0;
        // float nu = (sigma * settings.h_LR * settings.v_max) / (2.0 * p.rho); 
        // float nu = (2 * sigma * settings.h_LR * settings.v_max) / (settings.rho0 + p.rho); 
        // float mu = 0.1;
        // float nu = mu * 2.0 * (3.0 + 2.0); //? https://animation.rwth-aachen.de/media/papers/67/2020-TVCG-ImplicitBoundaryHandling.pdf

        // float x_norm = sqrt(dot(p_pi, p_pi));
        // float pi = -nu * (dot(v_t, p_pi)) / ((r * r) + (0.01 * settings.h_LR * settings.h_LR));
        // vec3 F_v = volume * pi * gradient; 

        internalForce += F_f;
        // internalForce += F_v;
        // internalForce += length(F_v) > length(F_f) ? F_v : F_f;
        // internalForce += F_v + F_f;
    )

    internalForce *= -settings.mass; // * exp(p.position.y - 0);

    p.internalForce.xyz = internalForce; 

    ssbo.particles[particleID] = p;
}


//Todo: https://animation.rwth-aachen.de/media/papers/2015-SCA-DFSPH.pdf

// file:///C:/Users/andre/Downloads/Interactive_SPH_simulation_and_rendering_on_the_GP.pdf